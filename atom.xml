<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Little Boy`s Treasure</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nic_reals.gitee.io/blog/"/>
  <updated>2017-10-26T13:18:09.794Z</updated>
  <id>http://nic_reals.gitee.io/blog/</id>
  
  <author>
    <name>Nic Reals</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WordPress</title>
    <link href="http://nic_reals.gitee.io/blog/2017/10/24/Gear/WordPress/"/>
    <id>http://nic_reals.gitee.io/blog/2017/10/24/Gear/WordPress/</id>
    <published>2017-10-24T15:33:37.000Z</published>
    <updated>2017-10-26T13:18:09.794Z</updated>
    
    <content type="html"><![CDATA[<!-- # 大概是最性感的WordPress折腾攻略 --><blockquote><p><a href="https://miaocode.tk/centos6-vps-wordpress/" target="_blank" rel="external">CentOS6 VPS安装LNMP+WordPress ip建站全过程</a><br><a href="https://sspai.com/post/37118" target="_blank" rel="external">使用VPS搭建自己的WordPress</a></p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="VPS服务器"><a href="#VPS服务器" class="headerlink" title="VPS服务器"></a>VPS服务器</h3><p>推荐购买<a href="https://www.vultr.com/?ref=7234742" target="_blank" rel="external">Vultr</a>的服务器，价格相对便宜，速度稳定，还自带DNS解析；</p><h3 id="个人域名"><a href="#个人域名" class="headerlink" title="个人域名"></a>个人域名</h3><p>有Visa信用卡的可以在<a href="https://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>购买域名；或者选择<a href="https://wanwang.aliyun.com" target="_blank" rel="external">阿里云</a>也是不错的选择；购买后需要设置<code>DNS</code>解析才能将域名指向VPS服务器的IP；</p><h3 id="一颗闲的疼的蛋"><a href="#一颗闲的疼的蛋" class="headerlink" title="一颗闲的疼的蛋"></a>一颗闲的疼的蛋</h3><p>生命不息，折腾不止</p><a id="more"></a><h2 id="LNMP安装"><a href="#LNMP安装" class="headerlink" title="LNMP安装"></a>LNMP安装</h2><p>所谓<a href="https://lnmp.org/" target="_blank" rel="external">LNMP</a>就是集成了<code>Nginx</code>, <code>MySQL</code>, <code>PHP</code>全家桶的<code>WordPress</code>懒人工具包;</p><h3 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a><code>SSH</code>登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@&lt;your ip&gt;</div></pre></td></tr></table></figure><h3 id="开启screen保护"><a href="#开启screen保护" class="headerlink" title="开启screen保护"></a>开启screen保护</h3><p> 由于<code>LNMP</code>安装时间较长(0.5h-1.0h),未避免手贱关闭<code>Terminal</code>致使安装中断，导致前功尽弃，所以需要开启<a href="http://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html" target="_blank" rel="external">screen</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">screen -S lnmp</div></pre></td></tr></table></figure><h3 id="脚本安装LNMP"><a href="#脚本安装LNMP" class="headerlink" title="脚本安装LNMP"></a>脚本安装<code>LNMP</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -c http://soft.vpser.net/lnmp/lnmp1.4-full.tar.gz &amp;&amp; tar zxf lnmp1.4-full.tar.gz &amp;&amp; cd lnmp1.4-full &amp;&amp; ./install.sh lnmp4</div></pre></td></tr></table></figure><h3 id="脚本配置提示设定"><a href="#脚本配置提示设定" class="headerlink" title="脚本配置提示设定"></a>脚本配置提示设定</h3><ol><li>设置<code>MySQL</code>版本以及密码，默认即可，高版本对内存要求较高，不建议；</li><li>设置<code>PHP</code>版本，可以选择高版本或者自己熟悉的版本，后期开发方便；</li><li>是否安装内存优化(Jemalloc/TCMlloc),内存小的VPS建议不安装；</li><li>是否生成同名数据库，可以先选择<code>n</code>,后面再进行配置;</li><li>是否安装<code>SSL</code>，直接enter默认即可</li><li>激动的点击enter开始安装</li></ol><p><strong>此期间耗时较长，可能会经历若干次数失败，出现问题请重复以上步骤</strong></p><h3 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h3><p>任意目录执行命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lnmp vhost add</div></pre></td></tr></table></figure><p>期间有如下配置:</p><ol><li>设置域名，输入在阿里云或者Godaddy申请的域名,eg:<code>www.nicreals.cn</code>;</li><li>设置额外域名,eg:<code>nicreals.cn</code>;</li><li>设置目录，默认即可；</li><li>是否开启伪静态：y回车；</li><li>伪静态类型：输入wordpress回车；</li><li>是否开启log，默认即可</li><li>激动的点击enter开始配置虚拟主机</li></ol><p>成功后会在<code>/usr/local/nginx/conf/vhost/www.embracez.xyz.conf</code>目录下生成配置文件，并且访问VPS的IP地址会出现<code>LNMP</code>的欢迎页面:</p><p><img src="http://oy7jl2mxp.bkt.clouddn.com/lnmp_welcome.png" alt="lnmp_welcome"></p><h3 id="安装Wordpress"><a href="#安装Wordpress" class="headerlink" title="安装Wordpress"></a>安装Wordpress</h3><p>切换到根目录:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~</div></pre></td></tr></table></figure><p>下载并解压<code>WordPress</code>安装包:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -c https://cn.wordpress.org/wordpress-4.2.2-zh_CN.tar.gz</div><div class="line">tar zxvf wordpress-4.2.2-zh_CN.tar.gz</div></pre></td></tr></table></figure><p>设置读写权限:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown -R www:www wordpress</div></pre></td></tr></table></figure><p>复制文件到主机根目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp -R wordpress/* /home/wwwroot/&lt;your domain&gt;</div></pre></td></tr></table></figure><p>此时访问域名即可出现WordPress设置界面:</p><p><img src="http://oy7jl2mxp.bkt.clouddn.com/wp_welcome.png" alt=""></p><p>若安装过程中发现配置失败，或者想重新配置，需要执行以下步骤:</p><ul><li><p>删除虚拟主机</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lnmp vhost del &lt;your domain&gt;</div></pre></td></tr></table></figure></li><li><p>配置文件权限文件<br>使用lnmp命令并不会自动删除主机文件，并且主<br>机下<code>.user.ini</code>文件不能直接删除，需要执行以下步骤删除:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chattr -i /home/wwwroot/&lt;your domain&gt;/.user.ini</div></pre></td></tr></table></figure><ul><li>删除目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /home/wwwroot/&lt;your domain&gt;/</div></pre></td></tr></table></figure></li></ul><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>访问VPS的IP，点击<code>phpMyAdmin</code>使用安装<code>LNMP</code>时设置的用户/密码登录，进入后台配置页面；</p><p>点击<code>账户</code>-&gt;<code>新增用户账户</code>来添加<code>WordPress</code>的登录用户:<br>Host name填写localhost，勾选<code>创建与用户同名的数据库并授予所有权限</code>选项。</p><p>完成后访问申请的域名按照向导提示一步步完成配置即可。</p><h2 id="配置FTP服务"><a href="#配置FTP服务" class="headerlink" title="配置FTP服务"></a>配置FTP服务</h2><p>安装<code>pureftpd</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./lnmp1.4/pureftpd.sh</div></pre></td></tr></table></figure><p>设置主机目录权限:</p><p>如果VPS的系统是Ubuntu，还需要配置文件权限才能正常使用FTP服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chown www-data /home/wwwroot/&lt;your domain&gt;/</div><div class="line"></div><div class="line">chgrp www-data /home/wwwroot/&lt;your domain&gt;/</div><div class="line"></div><div class="line">chmod g+w /home/wwwroot/&lt;your domain&gt;/</div></pre></td></tr></table></figure><p>只有在配置完FTP服务后，才能正常的安装主题，插件和上传文件到虚拟主机.</p><h2 id="插件-主题"><a href="#插件-主题" class="headerlink" title="插件/主题"></a>插件/主题</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>插件和主题可以在控制台搜索安装，也可以通过上传本地<code>zip</code>文件安装。</p><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><ul><li>SiteOrigin CSS: 可以非常方便的修改页面上的css样式；</li><li>WP Editor.md:完善的MarkDown编辑器，并且可以自定义代码高亮效果；</li><li>Hacker:适合程序员的一款主题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- # 大概是最性感的WordPress折腾攻略 --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://miaocode.tk/centos6-vps-wordpress/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS6 VPS安装LNMP+WordPress ip建站全过程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://sspai.com/post/37118&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用VPS搭建自己的WordPress&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;VPS服务器&quot;&gt;&lt;a href=&quot;#VPS服务器&quot; class=&quot;headerlink&quot; title=&quot;VPS服务器&quot;&gt;&lt;/a&gt;VPS服务器&lt;/h3&gt;&lt;p&gt;推荐购买&lt;a href=&quot;https://www.vultr.com/?ref=7234742&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vultr&lt;/a&gt;的服务器，价格相对便宜，速度稳定，还自带DNS解析；&lt;/p&gt;
&lt;h3 id=&quot;个人域名&quot;&gt;&lt;a href=&quot;#个人域名&quot; class=&quot;headerlink&quot; title=&quot;个人域名&quot;&gt;&lt;/a&gt;个人域名&lt;/h3&gt;&lt;p&gt;有Visa信用卡的可以在&lt;a href=&quot;https://www.godaddy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GoDaddy&lt;/a&gt;购买域名；或者选择&lt;a href=&quot;https://wanwang.aliyun.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里云&lt;/a&gt;也是不错的选择；购买后需要设置&lt;code&gt;DNS&lt;/code&gt;解析才能将域名指向VPS服务器的IP；&lt;/p&gt;
&lt;h3 id=&quot;一颗闲的疼的蛋&quot;&gt;&lt;a href=&quot;#一颗闲的疼的蛋&quot; class=&quot;headerlink&quot; title=&quot;一颗闲的疼的蛋&quot;&gt;&lt;/a&gt;一颗闲的疼的蛋&lt;/h3&gt;&lt;p&gt;生命不息，折腾不止&lt;/p&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="WordPress" scheme="http://nic_reals.gitee.io/blog/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>AppCode</title>
    <link href="http://nic_reals.gitee.io/blog/2017/09/26/Gear/AppCode/"/>
    <id>http://nic_reals.gitee.io/blog/2017/09/26/Gear/AppCode/</id>
    <published>2017-09-26T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:27.629Z</updated>
    
    <content type="html"><![CDATA[<!-- # AppCode --><blockquote><p><a href="https://www.jetbrains.com/objc/features/" target="_blank" rel="external">AppCode Features</a></p></blockquote><h2 id="Keymap"><a href="#Keymap" class="headerlink" title="Keymap"></a>Keymap</h2><table><thead><tr><th style="text-align:left">Descriptions</th><th style="text-align:center">ShortCut</th></tr></thead><tbody><tr><td style="text-align:left">find useage</td><td style="text-align:center">alt - f7</td></tr><tr><td style="text-align:left">replace in path</td><td style="text-align:center">cmd-alt-shift-f</td></tr></tbody></table><h2 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h2><p>考虑到经常抽风，崩溃，各种奇怪的问题，使用Xcode的感受大概是这样:</p><p><img src="../IMG/xcode_gun.jpg" alt="xcode_gun"></p><p>vim大概这样:</p><p><img src="../IMG/vim.jpg" alt="vim_gun"></p><p><em>听说传说中牛逼的程序员vim在手，完全不用IDE，可惜我没见过</em></p><p>还好我们有喷脑浆(jetBrain)出的AppCode,大概这样:</p><p><img src="../IMG/jetbrain_gun.jpg" alt="appcode_gun"></p><p><em>如果AppCode用的溜，同理喷脑浆其他的产品，大概是这样</em>:</p><p><img src="../IMG/visual_studio.jpg" alt="visual_studio"></p><a id="more"></a><h2 id="Advantage"><a href="#Advantage" class="headerlink" title="Advantage"></a>Advantage</h2><h3 id="Crash"><a href="#Crash" class="headerlink" title="Crash"></a>Crash</h3><p><img src="../IMG/xcode_crash.jpeg" alt="xcode_crash"></p><p>懂的人都懂</p><h3 id="Refactor"><a href="#Refactor" class="headerlink" title="Refactor"></a>Refactor</h3><p>编码过程中不可避免要对代码进行重构，以最简单的改变量名称为例:</p><p><img src="../IMG/appcode_refactor.gif" alt="appcode_refactor"></p><p>同时AppCode支持对枚举，类名，文件名进行全局更改，并且能够将代码片段封装成方法。</p><h3 id="Code-Completion"><a href="#Code-Completion" class="headerlink" title="Code Completion"></a>Code Completion</h3><p>能根据上下文和个人使用习惯匹配的代码提示，用过的都知道。<br>顺便讲个笑话，Xcode之前的版本代码提示必须从左到右逐一打出来才能不匹配。</p><p><img src="../IMG/live_sp.gif" alt="live_sp"></p><h3 id="Auto-Import"><a href="#Auto-Import" class="headerlink" title="Auto Import"></a>Auto Import</h3><p>就算没有import的类，编码过程中，AppCode依然能匹配改类，并且在选中后自动import改类，完全不会被文件引用的问题打断思路。<br>并且如果是在头文件的化，会默认使用<code>@import</code>而不是<code>#import</code>,简直是强迫症的福音。</p><p><img src="../IMG/appcode_auto.gif" alt="appcode_auto"></p><h3 id="Live-Template"><a href="#Live-Template" class="headerlink" title="Live Template"></a>Live Template</h3><p>类似于Xcode的snippet，但是功能比snippet可玩性和实用性上好很多，<br>例如输入<code>logv</code>可以根据上下文判断需要log的变量，并且自动匹配变量说明符,<br>感受下:</p><p><img src="../IMG/live_logv.gif" alt="live_logv"></p><h3 id="Load-Resource"><a href="#Load-Resource" class="headerlink" title="Load Resource"></a>Load Resource</h3><p>例如最常见的<code>imageNamed</code> 加载图片:</p><p><img src="../IMG/live_image.gif" alt="live_image"></p><h3 id="Code-Inspection"><a href="#Code-Inspection" class="headerlink" title="Code Inspection"></a>Code Inspection</h3><p>AppCode会实时检测代码中不合理的地方，并给出合理的改进方案:</p><p><img src="../IMG/inspection_if.gif" alt="inspection_if"></p><h3 id="Customize"><a href="#Customize" class="headerlink" title="Customize"></a>Customize</h3><p>AppCode除了可以定制代码配色，文件布局，甚至可以自定义代码风格，假如你喜欢这样的<code>{}</code>的换行方式:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)test</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>  那么指定后，AppCode会自动在你输入<code>{}</code>是将其格式化成如上形式</p><h3 id="Auto-Integration"><a href="#Auto-Integration" class="headerlink" title="Auto Integration"></a>Auto Integration</h3><p>不同于Xcode，使用AppCode，对Framework，libary，bundle的更改会实时生效，而不需要像Xcode那样编译一遍相应的target之后才能生效</p><h3 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a>Version Control</h3><p>几乎Git 客户端有的功能AppCode都有，而且还挺好用</p><h2 id="Bazinga"><a href="#Bazinga" class="headerlink" title="Bazinga"></a>Bazinga</h2><p>颜值即是第一生产力:</p><p><img src="../IMG/appcode_snap.png" alt="appcode_snap"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # AppCode --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/objc/features/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppCode Features&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Keymap&quot;&gt;&lt;a href=&quot;#Keymap&quot; class=&quot;headerlink&quot; title=&quot;Keymap&quot;&gt;&lt;/a&gt;Keymap&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Descriptions&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;ShortCut&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;find useage&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;alt - f7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;replace in path&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-alt-shift-f&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;Compare&quot;&gt;&lt;a href=&quot;#Compare&quot; class=&quot;headerlink&quot; title=&quot;Compare&quot;&gt;&lt;/a&gt;Compare&lt;/h2&gt;&lt;p&gt;考虑到经常抽风，崩溃，各种奇怪的问题，使用Xcode的感受大概是这样:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../IMG/xcode_gun.jpg&quot; alt=&quot;xcode_gun&quot;&gt;&lt;/p&gt;
&lt;p&gt;vim大概这样:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../IMG/vim.jpg&quot; alt=&quot;vim_gun&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;听说传说中牛逼的程序员vim在手，完全不用IDE，可惜我没见过&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;还好我们有喷脑浆(jetBrain)出的AppCode,大概这样:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../IMG/jetbrain_gun.jpg&quot; alt=&quot;appcode_gun&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果AppCode用的溜，同理喷脑浆其他的产品，大概是这样&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../IMG/visual_studio.jpg&quot; alt=&quot;visual_studio&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="AppCode" scheme="http://nic_reals.gitee.io/blog/tags/AppCode/"/>
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
  </entry>
  
  <entry>
    <title>Atom</title>
    <link href="http://nic_reals.gitee.io/blog/2017/09/10/Gear/Atom/"/>
    <id>http://nic_reals.gitee.io/blog/2017/09/10/Gear/Atom/</id>
    <published>2017-09-10T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:22.573Z</updated>
    
    <content type="html"><![CDATA[<!-- # Atom --><blockquote><p><a href="https://github.com/futantan/atom" target="_blank" rel="external">Atom快捷键</a></p></blockquote><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th style="text-align:left">Descriptions</th><th style="text-align:center">ShortCut</th></tr></thead><tbody><tr><td style="text-align:left">显示控制面板</td><td style="text-align:center">cmd-shift-p</td></tr><tr><td style="text-align:left">隐藏/显示文件树</td><td style="text-align:center">cmd-\</td></tr><tr><td style="text-align:left">列出所有Project</td><td style="text-align:center">cmd-ctrl-p</td></tr><tr><td style="text-align:left">显示Markdown预览</td><td style="text-align:center">ctrl-shift-m</td></tr><tr><td style="text-align:left">打开当前目录中的文件</td><td style="text-align:center">cmd-p</td></tr></tbody></table><h2 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h2><p><code>setting</code> -&gt; ‘packages’ -&gt; <code>autosave</code> -&gt; enable</p><a id="more"></a><h2 id="实用插件"><a href="#实用插件" class="headerlink" title="实用插件"></a>实用插件</h2><ul><li><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a> 图标美化</li><li><a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a> 格式化代码</li><li><a href="https://atom.io/packages/markdown-preview-enhanced" target="_blank" rel="external">markdown-preview-enhanced</a> markdown工具集</li><li><a href="https://atom.io/packages/project-manager" target="_blank" rel="external">project-manager</a> 项目组织管理</li><li><a href="https://atom.io/packages/split-diff" target="_blank" rel="external">split-off</a> diff代码</li><li><a href="https://atom.io/packages/merge-conflicts" target="_blank" rel="external">merge-conflicts</a> 合并冲突可视化工具</li></ul><h2 id="更改快捷键"><a href="#更改快捷键" class="headerlink" title="更改快捷键"></a>更改快捷键</h2><ul><li>在<code>Preference</code>-&gt;<code>Keybindings</code> 中找到想更改的快捷键的<code>Selector</code>,<code>Command</code>,<code>Keystroke</code>；</li><li>在菜单栏中<code>Atom</code>-&gt;<code>Keymap...</code>打开<code>keymap.cson</code>；</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;.platform-darwin&apos;:</div><div class="line">    &apos;ctrl-cmd-l&apos;: &apos;project-manager:list-projects&apos;</div></pre></td></tr></table></figure></p><h2 id="更改样式"><a href="#更改样式" class="headerlink" title="更改样式"></a>更改样式</h2><ul><li>使用<code>cmd-alt-i</code>快捷键打开开发者工具，调试找出想要修改元素对应的css节点</li><li>在菜单栏中<code>Atom</code>-&gt;<code>Stylesheet...</code>打开<code>styless.less</code>修改样式；</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.theme-one-dark-ui,</div><div class="line">.theme-one-light-ui &#123;</div><div class="line">  .tab-bar &#123;</div><div class="line">    font-family: &apos;Menlo&apos;;</div><div class="line">    font-size: 11px; // smaller font size</div><div class="line">    margin-top: -4px;</div><div class="line">  &#125;</div><div class="line">  .tab &#123;</div><div class="line">    min-width: 12em; // larger minimum width</div><div class="line">    max-width: 18em; // smaller max width</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">.markdown-preview-enhanced &#123;</div><div class="line">    font-size: 11px;</div><div class="line">    font-family: &apos;Monaco&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Atom --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/futantan/atom&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atom快捷键&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Descriptions&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;ShortCut&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示控制面板&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-shift-p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;隐藏/显示文件树&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;列出所有Project&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-ctrl-p&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;显示Markdown预览&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ctrl-shift-m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开当前目录中的文件&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-p&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;自动保存&quot;&gt;&lt;a href=&quot;#自动保存&quot; class=&quot;headerlink&quot; title=&quot;自动保存&quot;&gt;&lt;/a&gt;自动保存&lt;/h2&gt;&lt;p&gt;&lt;code&gt;setting&lt;/code&gt; -&amp;gt; ‘packages’ -&amp;gt; &lt;code&gt;autosave&lt;/code&gt; -&amp;gt; enable&lt;/p&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="Atom" scheme="http://nic_reals.gitee.io/blog/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>Core-Animation</title>
    <link href="http://nic_reals.gitee.io/blog/2017/05/18/iOS/Animation/"/>
    <id>http://nic_reals.gitee.io/blog/2017/05/18/iOS/Animation/</id>
    <published>2017-05-18T15:33:37.000Z</published>
    <updated>2017-10-26T13:05:04.783Z</updated>
    
    <content type="html"><![CDATA[<!-- # Animation --><blockquote><p><a href="http://kittenyang.com/anchorpoint/" target="_blank" rel="external">position,anchorPoint区别</a></p></blockquote><h2 id="Position-amp-anchorPoint"><a href="#Position-amp-anchorPoint" class="headerlink" title="Position &amp; anchorPoint"></a>Position &amp; anchorPoint</h2><ul><li><p><code>anchorPoint</code>描述layer旋转变换的支点，就像一张纸上被订上一颗图钉，这张纸的旋转变换都会围绕这个点，并且<code>anchorPoint</code>的坐标表示是相对的，iOS坐标系里中心点、左下角和右上角的anchorPoint为(0.5,0.5), (0,1), (1,0)；</p></li><li><p><code>position</code>表示<code>anchorPoint</code>在superLayer中的位置</p></li></ul><p><em>iOS中坐标远点为左上角，而Mac OS中的坐标远点在左下角</em></p><a id="more"></a><h2 id="CALayer"><a href="#CALayer" class="headerlink" title="CALayer"></a>CALayer</h2><h3 id="content属性"><a href="#content属性" class="headerlink" title="content属性"></a>content属性</h3><p><a href="http://wiki.jikexueyuan.com/project/ios-core-animation/boarding-figure.html" target="_blank" rel="external">关于contents属性的详细介绍</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Objective-C</div><div class="line">layer.contents = (__bridge id)image.CGImage;</div><div class="line"></div><div class="line">// Swift</div><div class="line">layer.contents = image?.CGImage</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Animation --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://kittenyang.com/anchorpoint/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;position,anchorPoint区别&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Position-amp-anchorPoint&quot;&gt;&lt;a href=&quot;#Position-amp-anchorPoint&quot; class=&quot;headerlink&quot; title=&quot;Position &amp;amp; anchorPoint&quot;&gt;&lt;/a&gt;Position &amp;amp; anchorPoint&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;anchorPoint&lt;/code&gt;描述layer旋转变换的支点，就像一张纸上被订上一颗图钉，这张纸的旋转变换都会围绕这个点，并且&lt;code&gt;anchorPoint&lt;/code&gt;的坐标表示是相对的，iOS坐标系里中心点、左下角和右上角的anchorPoint为(0.5,0.5), (0,1), (1,0)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;position&lt;/code&gt;表示&lt;code&gt;anchorPoint&lt;/code&gt;在superLayer中的位置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;iOS中坐标远点为左上角，而Mac OS中的坐标远点在左下角&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Core-Animation" scheme="http://nic_reals.gitee.io/blog/tags/Core-Animation/"/>
    
      <category term="iOS" scheme="http://nic_reals.gitee.io/blog/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Cocoapods</title>
    <link href="http://nic_reals.gitee.io/blog/2017/04/26/Gear/Cocoapods/"/>
    <id>http://nic_reals.gitee.io/blog/2017/04/26/Gear/Cocoapods/</id>
    <published>2017-04-26T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:17.133Z</updated>
    
    <content type="html"><![CDATA[<!-- # Cocoapods --><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>可以参考：</p><ol><li><a href="https://guides.cocoapods.org/" target="_blank" rel="external">Cocoapods Guide</a></li><li><a href="http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/" target="_blank" rel="external">用CocoaPods做iOS程序的依赖管理</a></li><li><a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/" target="_blank" rel="external">使用Cocoapods创建私有podspec</a></li></ol><h2 id="模块化方案"><a href="#模块化方案" class="headerlink" title="模块化方案"></a>模块化方案</h2><h3 id="总体思想"><a href="#总体思想" class="headerlink" title="总体思想"></a>总体思想</h3><p>将APP根据业务板块拆分为若干个<code>cocoapods</code>私有本地pods，将基础性的公用代码（基础工具类，公用UI组件等）单独创建一个模块（本地pods），其他模块依赖与该公用模块，主工程只需要放入统筹各个模块的代码（appdelegate,tabbarcontroller，模块间的通信实现等），将各个子模块连接在一起；</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>减少业务代码耦合性；</li><li>便于多人合作任务分工，避免代码合并冲突；</li><li>加快编译效率，测试代码只需编译所在子模块；</li><li>对于大型项目，后期便于维护；</li></ol><a id="more"></a><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>需要开发者对业务所属模块有清晰的认识；</li><li>建立模块化的过程相对复杂，需要对Cocoapods有较为深入的了解；</li><li>使用不当会造成App包体积增大；</li></ol><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ol><li>创建私有库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create UP-base</div></pre></td></tr></table></figure><p>配置<code>podspec</code>文件:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'UP-base'</span></div><div class="line">  s.version          = <span class="string">'0.1.0'</span></div><div class="line">  s.summary          = <span class="string">'A short description of UP-base.'</span></div><div class="line"></div><div class="line">  s.homepage         = <span class="string">'https://github.com/nicreals/UP-base'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'nicreals'</span> =&gt; <span class="string">'nic.reals@outlook.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://github.com/nicreals/UP-base.git'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</div><div class="line"></div><div class="line"></div><div class="line">  s.platform     = <span class="symbol">:ios</span>, <span class="string">'7.0'</span></div><div class="line">  s.source_files = <span class="string">'UP-base/Classes/**/*.&#123;h,m&#125;'</span> /<span class="regexp">/指定源文件路径</span></div><div class="line"><span class="regexp">  s.resources = 'UP-base/</span>Assets/**<span class="regexp">/*.png' /</span><span class="regexp">/ 指定资源文件路径</span></div><div class="line"><span class="regexp">  # s.prefix_header_file = 'UP-base/</span>Classes/UPBase.pch<span class="string">' //指定pch文件路径</span></div><div class="line"><span class="string">  s.dependency '</span>Masonry<span class="string">' // 设置依赖库</span></div><div class="line"><span class="string">end</span></div></pre></td></tr></table></figure><ol><li>主工程集成</li></ol><p>在主工程目录创建<code>Podfile</code>并配置自工程路径：</p><p>生成<code>Podfile</code>:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod init</div></pre></td></tr></table></figure><p>配置<code>Podfile</code>:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">platform <span class="symbol">:ios</span>, <span class="string">'7.0'</span></div><div class="line">workspace <span class="string">'UP_GuPiaoTong'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">podlibs</span></span></div><div class="line">    pod <span class="string">'UP-mine'</span>, <span class="symbol">:path</span> =&gt; <span class="string">'~/Documents/UpChina/UP-mine'</span></div><div class="line">    pod <span class="string">'UP-market'</span>, <span class="symbol">:path</span> =&gt; <span class="string">'~/Documents/UpChina/UP-market'</span></div><div class="line">    pod <span class="string">'UP-base'</span>, <span class="symbol">:path</span> =&gt; <span class="string">'~/Documents/UpChina/UP-base'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">target <span class="string">'UP_GuPiaoTong'</span> <span class="keyword">do</span></div><div class="line">  podlibs</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>集成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install --no-repo-update</div></pre></td></tr></table></figure><ol><li>模块间通讯实现</li></ol><p>在子模块定义接口协议:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UPBaseRouterDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)base:(<span class="built_in">UIViewController</span> *)base goLoginWithComplete:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span> success))complete;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UPBaseRouter</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;UPBaseRouterDelegate&gt; delegate;</div><div class="line"></div><div class="line">+ (UPBaseRouter *)shareInstance;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><p>主工程中实现协议:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UPBaseRouterManager</span></div><div class="line">- (<span class="keyword">void</span>)base:(<span class="built_in">UIViewController</span> *)base goLoginWithComplete:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span>))complete &#123;</div><div class="line">    <span class="keyword">self</span>.loginBlock = complete;</div><div class="line">    UPLoginViewController *login = [[UPLoginViewController alloc] init];</div><div class="line">    login.hidesBottomBarWhenPushed = <span class="literal">YES</span>;</div><div class="line">    login.delegate = <span class="keyword">self</span>;</div><div class="line">    <span class="built_in">UINavigationController</span> *nav = [[<span class="built_in">UINavigationController</span> alloc] initWithRootViewController:login];</div><div class="line">    [base presentViewController:nav animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didLoginSuccess:(<span class="built_in">BOOL</span>)success &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,@(success));</div><div class="line">    <span class="keyword">self</span>.loginBlock(success);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><p>模块间调用:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)goLogin:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    [[UPBaseRouter shareInstance].delegate base:<span class="keyword">self</span> goLoginWithComplete:^(<span class="built_in">BOOL</span> success) &#123;</div><div class="line">        [<span class="keyword">self</span>.loginButton setTitle:<span class="string">@"已登陆"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"登陆成功 - market"</span>);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="减少文件路径层级"><a href="#减少文件路径层级" class="headerlink" title="减少文件路径层级"></a>减少文件路径层级</h3><p>直接将子模块所有文件放在模块第一级目录，同时如下设置<code>podspec</code>:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.source_files = <span class="string">'**/*.&#123;h,m,pch&#125;'</span></div><div class="line">s.resources = <span class="string">'Assets/**/*.png'</span></div><div class="line">s.exclude_files = <span class="string">'Example/**/*'</span></div></pre></td></tr></table></figure></p><h3 id="优化代码提示"><a href="#优化代码提示" class="headerlink" title="优化代码提示"></a>优化代码提示</h3><h4 id="优化主工程调用子工程的代码提示"><a href="#优化主工程调用子工程的代码提示" class="headerlink" title="优化主工程调用子工程的代码提示"></a>优化主工程调用子工程的代码提示</h4><p>在<code>build setting</code> -&gt; <code>user header search paths</code> 添加<code>&quot;${PODS_ROOT}/&quot;</code>路径</p><h4 id="优化子模块的代码提示"><a href="#优化子模块的代码提示" class="headerlink" title="优化子模块的代码提示"></a>优化子模块的代码提示</h4><ol><li>设置pch文件:</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.prefix_header_file = <span class="string">'UP-Base.pch'</span></div></pre></td></tr></table></figure><p>这样可以使模块内部可直接使用pch文件中定义的类。</p><ol><li>设置外部头文件:</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.public_header_files = <span class="string">'UP-Base.h'</span></div></pre></td></tr></table></figure><p><strong>同时要注释掉主工程的<code>Podfile</code>中的<code>use_framework!</code>;</strong></p><p>这样可以在新建文件时自动倒入该文件的父类(前提是<code>UP-Base.h</code>中定义了该类)</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Cocoapods --&gt;
&lt;h2 id=&quot;基础使用&quot;&gt;&lt;a href=&quot;#基础使用&quot; class=&quot;headerlink&quot; title=&quot;基础使用&quot;&gt;&lt;/a&gt;基础使用&lt;/h2&gt;&lt;p&gt;可以参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cocoapods Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用CocoaPods做iOS程序的依赖管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Cocoapods创建私有podspec&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;模块化方案&quot;&gt;&lt;a href=&quot;#模块化方案&quot; class=&quot;headerlink&quot; title=&quot;模块化方案&quot;&gt;&lt;/a&gt;模块化方案&lt;/h2&gt;&lt;h3 id=&quot;总体思想&quot;&gt;&lt;a href=&quot;#总体思想&quot; class=&quot;headerlink&quot; title=&quot;总体思想&quot;&gt;&lt;/a&gt;总体思想&lt;/h3&gt;&lt;p&gt;将APP根据业务板块拆分为若干个&lt;code&gt;cocoapods&lt;/code&gt;私有本地pods，将基础性的公用代码（基础工具类，公用UI组件等）单独创建一个模块（本地pods），其他模块依赖与该公用模块，主工程只需要放入统筹各个模块的代码（appdelegate,tabbarcontroller，模块间的通信实现等），将各个子模块连接在一起；&lt;/p&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;减少业务代码耦合性；&lt;/li&gt;
&lt;li&gt;便于多人合作任务分工，避免代码合并冲突；&lt;/li&gt;
&lt;li&gt;加快编译效率，测试代码只需编译所在子模块；&lt;/li&gt;
&lt;li&gt;对于大型项目，后期便于维护；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="Cocoapods" scheme="http://nic_reals.gitee.io/blog/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>Xcode</title>
    <link href="http://nic_reals.gitee.io/blog/2017/03/06/Gear/Xcode/"/>
    <id>http://nic_reals.gitee.io/blog/2017/03/06/Gear/Xcode/</id>
    <published>2017-03-06T15:33:37.000Z</published>
    <updated>2017-10-26T13:05:21.889Z</updated>
    
    <content type="html"><![CDATA[<!-- # Xcode --><blockquote><p><a href="http://liujinlongxa.com/2016/11/27/Xcode%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%9C%A8%E7%BC%96%E8%AF%91%E5%89%8D%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/" target="_blank" rel="external">Xcode配置编译前脚本</a></p><p><a href="http://draveness.me/bei-xcodeproj-keng-de-zhe-ji-tian.html" target="_blank" rel="external">脚本动态添加Xcode文件</a></p><p><a href="http://www.jianshu.com/p/2167f755c47e" target="_blank" rel="external">PlistBuddy使用</a></p></blockquote><h2 id="xcode-install"><a href="#xcode-install" class="headerlink" title="xcode-install"></a>xcode-install</h2><p>安装多个版本Xcode:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gem install xcode-install</div><div class="line">xcversion list</div><div class="line">xcversion install 7</div></pre></td></tr></table></figure></p><p>切换Xcode：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 查看当前 Xcode 路径</div><div class="line">xcode-select -p</div><div class="line"></div><div class="line">// 切换</div><div class="line">sudo xcode-select -s /Applications/Xcode-8.2.1.app/Contents/Developer/</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h2><h3 id="警告等级"><a href="#警告等级" class="headerlink" title="警告等级"></a>警告等级</h3><ul><li>开启可信度较高的警告</li></ul><p>Build Setting -&gt; other c flags -&gt; <code>-Wall</code></p><ul><li>开启大部分警告</li></ul><p>Build Setting -&gt; other c flags -&gt; <code>-Wextra</code></p><ul><li>屏蔽第三方SDK<code>was built for newer iOS version</code>警告</li></ul><p>Target -&gt; Build Setting -&gt; Other Linker Flag -&gt; <code>-w</code></p><h3 id="警告屏蔽"><a href="#警告屏蔽" class="headerlink" title="警告屏蔽"></a>警告屏蔽</h3><p>对于编译警告，右键<code>Reveal in Log</code>，找到类似<code>[-Wprotocol]</code>的警告类型，然后在<code>Build Setting</code> -&gt; <code>Other Warning Flags</code> 中添加<code>[-Wno-protocol]</code></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><code>Edit Scheme</code> -&gt; <code>Arguments</code> -&gt; <code>Environment Variables</code><br>例如添加<code>DYLD_PRINT_STATISTICS = 1</code>，app在启动时会在console中打印详细的启动耗时</p><h2 id="多Framework"><a href="#多Framework" class="headerlink" title="多Framework"></a>多Framework</h2><h2 id="僵尸模式"><a href="#僵尸模式" class="headerlink" title="僵尸模式"></a>僵尸模式</h2><h2 id="XCodeConfig"><a href="#XCodeConfig" class="headerlink" title="XCodeConfig"></a>XCodeConfig</h2><h2 id="pbxproj合并冲突"><a href="#pbxproj合并冲突" class="headerlink" title="pbxproj合并冲突"></a>pbxproj合并冲突</h2><h3 id="mergepbx"><a href="#mergepbx" class="headerlink" title="mergepbx"></a>mergepbx</h3><ol><li>安装<code>mergepbx</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mergepbx</div></pre></td></tr></table></figure><ol><li>在<code>~/.gitconfig</code>文件中配置<code>mergepbx</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[merge &quot;mergepbx&quot;]</div><div class="line">        name = XCode project files merger</div><div class="line">        driver = mergepbx %O %A %B</div></pre></td></tr></table></figure><ol><li>在工程目录下创建<code>. gitattributes</code>文件并设置用mergepbx处理<code>pbxproj</code>文件合并</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*.pbxproj merge=mergepbx</div><div class="line">*.pbxproj binary merge=union</div></pre></td></tr></table></figure><h3 id="xUnique-弃用"><a href="#xUnique-弃用" class="headerlink" title="xUnique (弃用)"></a>xUnique (弃用)</h3><p><a href="http://www.swiftcafe.io/2016/10/12/xunique/" target="_blank" rel="external">使用xUnique解决xcproject文件冲突</a></p><ol><li><p>安装pip: <a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="external">pip官方文档</a></p></li><li><p>安装xUnique：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> // 一定要加sudo</div><div class="line">sudo pip install xUnique</div></pre></td></tr></table></figure></li><li><p>去掉<code>.git/hook/pre-commit.sample</code>的后缀名<code>.sample</code></p></li><li><p>将如下内容添加到<code>pre-commit</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xunique path/project.xcodeproj</div><div class="line"></div><div class="line">// 如果用了cocopods，还需要加入Pods.xcodeproj</div><div class="line">xunique path/Pods.xcodeproj</div></pre></td></tr></table></figure></li></ol><p>完成以上操作后，每次commit之前都会通过xUnique将<code>.xcproject</code>文件重新编码，避免合并时的冲突。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Xcode --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://liujinlongxa.com/2016/11/27/Xcode%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%9C%A8%E7%BC%96%E8%AF%91%E5%89%8D%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode配置编译前脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://draveness.me/bei-xcodeproj-keng-de-zhe-ji-tian.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;脚本动态添加Xcode文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/2167f755c47e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PlistBuddy使用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;xcode-install&quot;&gt;&lt;a href=&quot;#xcode-install&quot; class=&quot;headerlink&quot; title=&quot;xcode-install&quot;&gt;&lt;/a&gt;xcode-install&lt;/h2&gt;&lt;p&gt;安装多个版本Xcode:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gem install xcode-install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xcversion list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xcversion install 7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;切换Xcode：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 查看当前 Xcode 路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xcode-select -p&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 切换&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo xcode-select -s /Applications/Xcode-8.2.1.app/Contents/Developer/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="Xcode" scheme="http://nic_reals.gitee.io/blog/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Interview</title>
    <link href="http://nic_reals.gitee.io/blog/2017/02/23/Trick/Interview/"/>
    <id>http://nic_reals.gitee.io/blog/2017/02/23/Trick/Interview/</id>
    <published>2017-02-23T15:33:37.000Z</published>
    <updated>2017-10-26T13:03:02.199Z</updated>
    
    <content type="html"><![CDATA[<!-- # Interview --><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><ul><li>最近开发上遇到什么问题，是如何解决的？</li><li>最近有没有做什么比较酷的项目？</li><li>如何做好性能优化？</li><li>可以在哪些方面减小程序体积？</li></ul><h2 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h2><ul><li>TCP和UDP的区别？</li><li>内存管理中堆和栈的区别？</li><li>数据库常规语法</li></ul><a id="more"></a><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><h3 id="内存管理相关"><a href="#内存管理相关" class="headerlink" title="内存管理相关"></a>内存管理相关</h3><ul><li>ARC，MRC以及ARC的实现？</li><li>property修饰关键字的区别与用法？</li><li>循环引用以及<code>weakSelf</code>,<code>strongSelf</code>的作用？</li><li>如何实现深拷贝？</li></ul><h3 id="多线程相关"><a href="#多线程相关" class="headerlink" title="多线程相关"></a>多线程相关</h3><ul><li>iOS中如何保证线程安全？</li><li>如何处理多个网络请求并发？</li><li>如何保证线程安全？</li></ul><h3 id="runtime相关"><a href="#runtime相关" class="headerlink" title="runtime相关"></a>runtime相关</h3><ul><li>介绍下Objective-C的<code>objc_msgSend</code>函数</li><li>消息转发的具体过程</li></ul><h2 id="HR"><a href="#HR" class="headerlink" title="HR"></a>HR</h2><ul><li>家庭情况</li><li>你最大的缺点</li></ul><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><ul><li>公司盈利模式，人员规模，年龄发布，企业文化</li><li>开发设备</li><li>薪资，福利，加班费，公积金，税后工资</li></ul><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><ul><li>一定要提前到，提前准备好面试心态，所需物品，项目演示</li><li>电话面试提前准备面试环境</li><li>没有把握的技术慎提</li><li>和人事谈薪资起点要高，准备好议价言辞</li><li>面技术要老实，面人事要吹</li><li>切记不能冷场，闲谈阶段切记不能单单做听众</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Interview --&gt;
&lt;h2 id=&quot;General&quot;&gt;&lt;a href=&quot;#General&quot; class=&quot;headerlink&quot; title=&quot;General&quot;&gt;&lt;/a&gt;General&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最近开发上遇到什么问题，是如何解决的？&lt;/li&gt;
&lt;li&gt;最近有没有做什么比较酷的项目？&lt;/li&gt;
&lt;li&gt;如何做好性能优化？&lt;/li&gt;
&lt;li&gt;可以在哪些方面减小程序体积？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;CS&quot;&gt;&lt;a href=&quot;#CS&quot; class=&quot;headerlink&quot; title=&quot;CS&quot;&gt;&lt;/a&gt;CS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TCP和UDP的区别？&lt;/li&gt;
&lt;li&gt;内存管理中堆和栈的区别？&lt;/li&gt;
&lt;li&gt;数据库常规语法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Interview; Trick" scheme="http://nic_reals.gitee.io/blog/tags/Interview-Trick/"/>
    
  </entry>
  
  <entry>
    <title>Swift</title>
    <link href="http://nic_reals.gitee.io/blog/2017/02/09/iOS/Swift/"/>
    <id>http://nic_reals.gitee.io/blog/2017/02/09/iOS/Swift/</id>
    <published>2017-02-09T15:33:37.000Z</published>
    <updated>2017-10-26T13:04:02.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h1><blockquote><p><a href="http://swift.gg/2017/01/11/swift-3-tutorial-fundamentals/" target="_blank" rel="external">Swift3 指导手册</a></p><p><a href="http://swifter.tips/singleton/" target="_blank" rel="external">Swift 单例模式</a></p><p><a href="http://swift.gg/2017/01/10/dear-erica-singletons-and-property-observers/" target="_blank" rel="external">Swift单例中静态属性的额外作用</a></p></blockquote><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><ul><li>Swift中的枚举成员不会按顺序的被赋值为<code>0,1,2…</code>,每个枚举成员就是一个完备的值。</li><li>使用<code>Switch</code>穷举<code>enum</code>时如果在没有<code>default</code>分支的情况下必须穷举所有枚举类型，否则会报错。</li><li>相对于Objective-C中的枚举，Swift运行 switch 中匹配到的子句之后，程序会退出 switch 语句，并不会继续向下运行，不需要在每个分支判断后加<code>break</code></li></ul><a id="more"></a><h2 id="循环结构及遍历"><a href="#循环结构及遍历" class="headerlink" title="循环结构及遍历"></a>循环结构及遍历</h2><h3 id="stride序列"><a href="#stride序列" class="headerlink" title="stride序列"></a><code>stride</code>序列</h3><p>stride 函数返回一个任意可变步长 类型值的序列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.stride(through: 5, by: 1)   // 1,2,3,4,5 包含终点</div><div class="line">1.stride(to: 5, by: 1) // 1,2,3,4 不包含终点</div><div class="line"></div><div class="line">let  byThree = stride(from: 3, to: 10, by: 3)</div><div class="line">for ass in byThree &#123;</div><div class="line">    print(ass) // 3 6 9</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="indices属性"><a href="#indices属性" class="headerlink" title="indices属性"></a><code>indices</code>属性</h3><p><code>indices</code>属性会创建一个包含全部索引的范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let names = [&quot;Robb&quot;, &quot;Sansa&quot;, &quot;Arya&quot;, &quot;Jon&quot;]</div><div class="line">for nameIndex in names.indices &#123;</div><div class="line">    if(nameIndex &lt; 3) &#123;</div><div class="line">        print(names[nameIndex]) //Robb, Sansa, Arya</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="enumerated-方法"><a href="#enumerated-方法" class="headerlink" title="enumerated()方法"></a><code>enumerated()</code>方法</h3><p> <code>enumerated()</code>返回 一个由每一个数据项索引值和数据值组成的元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let names = [&quot;Robb&quot;, &quot;Sansa&quot;, &quot;Arya&quot;, &quot;Jon&quot;]</div><div class="line">for (index, name) in names.enumerated() &#123;</div><div class="line">    print(&quot;\(index): \(name)&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p>一个最优雅的Swift单例写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class MyManager  &#123;</div><div class="line">    static let sharedInstance = MyManager()</div><div class="line">    private init() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>声明为<code>let</code> 可保证线程安全，</li><li>将<code>init()</code>设置为<code>private</code>可保证不能外部生成新的实例。</li></ol><p>可以通过如下方式在调用单例时设置额外操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public final class Singleton &#123;</div><div class="line">    private static let _shared = Singleton()</div><div class="line">    private init() &#123; &#125;</div><div class="line"></div><div class="line">    public static var shared: Singleton &#123;</div><div class="line">        get &#123;</div><div class="line">            doSomething() // 举个栗子</div><div class="line">            return _shared</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swift&quot;&gt;&lt;a href=&quot;#Swift&quot; class=&quot;headerlink&quot; title=&quot;Swift&quot;&gt;&lt;/a&gt;Swift&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://swift.gg/2017/01/11/swift-3-tutorial-fundamentals/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift3 指导手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://swifter.tips/singleton/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift 单例模式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://swift.gg/2017/01/10/dear-erica-singletons-and-property-observers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Swift单例中静态属性的额外作用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Closure&quot;&gt;&lt;a href=&quot;#Closure&quot; class=&quot;headerlink&quot; title=&quot;Closure&quot;&gt;&lt;/a&gt;Closure&lt;/h2&gt;&lt;h2 id=&quot;循环引用&quot;&gt;&lt;a href=&quot;#循环引用&quot; class=&quot;headerlink&quot; title=&quot;循环引用&quot;&gt;&lt;/a&gt;循环引用&lt;/h2&gt;&lt;h2 id=&quot;Enum&quot;&gt;&lt;a href=&quot;#Enum&quot; class=&quot;headerlink&quot; title=&quot;Enum&quot;&gt;&lt;/a&gt;Enum&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Swift中的枚举成员不会按顺序的被赋值为&lt;code&gt;0,1,2…&lt;/code&gt;,每个枚举成员就是一个完备的值。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Switch&lt;/code&gt;穷举&lt;code&gt;enum&lt;/code&gt;时如果在没有&lt;code&gt;default&lt;/code&gt;分支的情况下必须穷举所有枚举类型，否则会报错。&lt;/li&gt;
&lt;li&gt;相对于Objective-C中的枚举，Swift运行 switch 中匹配到的子句之后，程序会退出 switch 语句，并不会继续向下运行，不需要在每个分支判断后加&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://nic_reals.gitee.io/blog/tags/iOS/"/>
    
      <category term="Swift" scheme="http://nic_reals.gitee.io/blog/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI</title>
    <link href="http://nic_reals.gitee.io/blog/2017/01/26/Gear/Travis-CI/"/>
    <id>http://nic_reals.gitee.io/blog/2017/01/26/Gear/Travis-CI/</id>
    <published>2017-01-26T15:33:37.000Z</published>
    <updated>2017-10-26T13:05:36.588Z</updated>
    
    <content type="html"><![CDATA[<!-- # Travis CI --><h2 id="GitHub生成access-token"><a href="#GitHub生成access-token" class="headerlink" title="GitHub生成access token"></a>GitHub生成access token</h2><p><code>GitHub</code>-&gt;<code>Setting</code>-&gt;<code>Personal access tokens</code>-&gt;<code>Generate new token</code></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><ul><li><p>方法一<br><code>Travis CI</code>-&gt;<code>Setting</code>添加GITHUB_API_KEY=<token>, <code>Display value in build log</code> 设置为 <code>Off</code>.</token></p></li><li><p>方法二<br>进入仓库根目录下运行 <code>travis encrypt -a GITHUB_API_KEY &lt;token&gt; GITHUB_API_KEY</code>会自动加到<code>.travis.yml</code></p></li></ul><h2 id="设置系统-语言-IDE版本"><a href="#设置系统-语言-IDE版本" class="headerlink" title="设置系统/语言/IDE版本"></a>设置系统/语言/IDE版本</h2><p>具体Xcode版本与Mac OS版本细节参考<a href="https://docs.travis-ci.com/user/osx-ci-environment/" target="_blank" rel="external">官方文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">language: objective-c</div><div class="line">osx_image: xcode8.2</div></pre></td></tr></table></figure><a id="more"></a><h2 id="启用缓存功能-实验性"><a href="#启用缓存功能-实验性" class="headerlink" title="启用缓存功能(实验性)"></a>启用缓存功能(实验性)</h2><p><a href="https://docs.travis-ci.com/user/caching/" target="_blank" rel="external">官方文档</a></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">language: ruby</div><div class="line">cache:</div><div class="line">  bundler: true</div><div class="line">  directories:</div><div class="line">  - node_modules # NPM packages</div></pre></td></tr></table></figure></p><h2 id="设置邮件通知"><a href="#设置邮件通知" class="headerlink" title="设置邮件通知"></a>设置邮件通知</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">notifications:</div><div class="line">  slack:</div><div class="line">    on_success: always</div><div class="line">    on_failure: never/change</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Travis CI --&gt;
&lt;h2 id=&quot;GitHub生成access-token&quot;&gt;&lt;a href=&quot;#GitHub生成access-token&quot; class=&quot;headerlink&quot; title=&quot;GitHub生成access token&quot;&gt;&lt;/a&gt;GitHub生成access token&lt;/h2&gt;&lt;p&gt;&lt;code&gt;GitHub&lt;/code&gt;-&amp;gt;&lt;code&gt;Setting&lt;/code&gt;-&amp;gt;&lt;code&gt;Personal access tokens&lt;/code&gt;-&amp;gt;&lt;code&gt;Generate new token&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;添加环境变量&quot;&gt;&lt;a href=&quot;#添加环境变量&quot; class=&quot;headerlink&quot; title=&quot;添加环境变量&quot;&gt;&lt;/a&gt;添加环境变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法一&lt;br&gt;&lt;code&gt;Travis CI&lt;/code&gt;-&amp;gt;&lt;code&gt;Setting&lt;/code&gt;添加GITHUB_API_KEY=&lt;token&gt;, &lt;code&gt;Display value in build log&lt;/code&gt; 设置为 &lt;code&gt;Off&lt;/code&gt;.&lt;/token&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法二&lt;br&gt;进入仓库根目录下运行 &lt;code&gt;travis encrypt -a GITHUB_API_KEY &amp;lt;token&amp;gt; GITHUB_API_KEY&lt;/code&gt;会自动加到&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;设置系统-语言-IDE版本&quot;&gt;&lt;a href=&quot;#设置系统-语言-IDE版本&quot; class=&quot;headerlink&quot; title=&quot;设置系统/语言/IDE版本&quot;&gt;&lt;/a&gt;设置系统/语言/IDE版本&lt;/h2&gt;&lt;p&gt;具体Xcode版本与Mac OS版本细节参考&lt;a href=&quot;https://docs.travis-ci.com/user/osx-ci-environment/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;language: objective-c&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;osx_image: xcode8.2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="Travis" scheme="http://nic_reals.gitee.io/blog/tags/Travis/"/>
    
      <category term="CI" scheme="http://nic_reals.gitee.io/blog/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://nic_reals.gitee.io/blog/2017/01/19/Gear/Markdown/"/>
    <id>http://nic_reals.gitee.io/blog/2017/01/19/Gear/Markdown/</id>
    <published>2017-01-19T15:33:37.000Z</published>
    <updated>2017-10-26T13:19:45.136Z</updated>
    
    <content type="html"><![CDATA[<!-- # Markdown --><blockquote><p><a href="http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C" target="_blank" rel="external">Markdown完整语法手册</a><br><a href="https://www.zybuluo.com/codeep/note/163962" target="_blank" rel="external">Markdown 公式指导手册</a></p></blockquote><h2 id="常用标记"><a href="#常用标记" class="headerlink" title="常用标记"></a>常用标记</h2><table><thead><tr><th style="text-align:center">效果</th><th style="text-align:center">标记</th><th style="text-align:center">示例</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">斜体</td><td style="text-align:center"><code>*</code>或<code>_</code></td><td style="text-align:center"><em>斜体</em></td><td style="text-align:center"><code>*</code>与文字之间不能有空格</td></tr><tr><td style="text-align:center">粗体</td><td style="text-align:center"><code>**</code>或<code>__</code></td><td style="text-align:center"><strong>粗体</strong></td><td style="text-align:center"><code>**</code>与文字之间不能有空格</td></tr><tr><td style="text-align:center">无序列表</td><td style="text-align:center"><code>.</code>或<code>*</code>或<code>+</code></td><td style="text-align:center">- 无序列表</td><td style="text-align:center"><code>.</code>前面添加有序数字变为有序列表</td></tr><tr><td style="text-align:center">转义</td><td style="text-align:center"><code>\</code></td><td style="text-align:center"># 一级标题</td><td style="text-align:center">-</td></tr></tbody></table><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li>原生表格:</li></ul><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr></tbody></table><ul><li>对齐：</li></ul><p>在表头下方的分隔线标记中加入<code>:</code>，即可指定表格的对齐方式：</p><ul><li><code>:---</code> 代表左对齐</li><li><code>:--:</code> 代表居中对齐</li><li><code>---:</code> 代表右对齐</li></ul><a id="more"></a><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在第一个代码块标记右边设置代码语言可以开启代码高亮功能；</p><p>例如Objective-C的代码标记为:</p><p>\<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\</div></pre></td></tr></table></figure></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *array = @[<span class="string">@"a"</span>,<span class="string">@"b"</span>,<span class="string">@"c"</span>];</div><div class="line"><span class="built_in">NSLog</span>@(<span class="string">"%@"</span>,array.allValues);</div></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>第一行写定义，另起一行天际<code>:</code>标记，后面添加一个缩进(tab)写解释内容</p><ul><li>代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Markdown</div><div class="line">:   一种标记语言</div></pre></td></tr></table></figure><ul><li>效果：</li></ul><p>Markdown<br>:   一种标记语言</p><h2 id="嵌套HTML代码"><a href="#嵌套HTML代码" class="headerlink" title="嵌套HTML代码"></a>嵌套HTML代码</h2><p>Markdown支持直接嵌套HTML语法，可以设置一些额外排版效果：</p><table><thead><tr><th style="text-align:left">展示效果</th><th style="text-align:left"><center>代码<center></center></center></th></tr></thead><tbody><tr><td style="text-align:left"><center> 居中 </center></td><td style="text-align:left"><code>&lt;center&gt; 居中 &lt;/center&gt;</code></td></tr><tr><td style="text-align:left"> <p align="right">靠右</p></td><td style="text-align:left"><code>&lt;p align=&quot;right&quot;&gt;靠右&lt;/p&gt;</code></td></tr><tr><td style="text-align:left"> 靠左</td><td style="text-align:left"><center> 靠左 </center></td></tr></tbody></table><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>一个简单的示例：<code>$$\frac{\sqrt{X^2 + Y^2}}{Z}$$</code></p><p>$$\frac{\sqrt{X^2 + Y^2}}{Z}$$</p><p>详细语法：<a href="https://www.zybuluo.com/codeep/note/163962" target="_blank" rel="external">Markdown 公式指导手册</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Markdown --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown完整语法手册&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zybuluo.com/codeep/note/163962&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown 公式指导手册&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用标记&quot;&gt;&lt;a href=&quot;#常用标记&quot; class=&quot;headerlink&quot; title=&quot;常用标记&quot;&gt;&lt;/a&gt;常用标记&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;效果&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标记&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;示例&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;斜体&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;_&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;*&lt;/code&gt;与文字之间不能有空格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;粗体&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;**&lt;/code&gt;或&lt;code&gt;__&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;粗体&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;**&lt;/code&gt;与文字之间不能有空格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;无序列表&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;.&lt;/code&gt;或&lt;code&gt;*&lt;/code&gt;或&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;- 无序列表&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;.&lt;/code&gt;前面添加有序数字变为有序列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;转义&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;code&gt;\&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;# 一级标题&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原生表格:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;学号&lt;/th&gt;
&lt;th&gt;姓名&lt;/th&gt;
&lt;th&gt;分数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;小明&lt;/td&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小红&lt;/td&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小陆&lt;/td&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;对齐：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在表头下方的分隔线标记中加入&lt;code&gt;:&lt;/code&gt;，即可指定表格的对齐方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:---&lt;/code&gt; 代表左对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:--:&lt;/code&gt; 代表居中对齐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;---:&lt;/code&gt; 代表右对齐&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="MarkDown" scheme="http://nic_reals.gitee.io/blog/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Gitbook</title>
    <link href="http://nic_reals.gitee.io/blog/2016/11/20/Gear/Gitbook/"/>
    <id>http://nic_reals.gitee.io/blog/2016/11/20/Gear/Gitbook/</id>
    <published>2016-11-20T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:06.270Z</updated>
    
    <content type="html"><![CDATA[<!-- # Gitbook --><blockquote><p><a href="https://toolchain.gitbook.com/" target="_blank" rel="external">Gitbook文档</a></p></blockquote><h2 id="安装cli工具"><a href="#安装cli工具" class="headerlink" title="安装cli工具"></a>安装cli工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install gitbook -g</div><div class="line">npm install gitbook-cli -g</div></pre></td></tr></table></figure><h2 id="自动生成SUMMARY"><a href="#自动生成SUMMARY" class="headerlink" title="自动生成SUMMARY"></a>自动生成SUMMARY</h2><h3 id="gitbook-summary"><a href="#gitbook-summary" class="headerlink" title="gitbook-summary"></a>gitbook-summary</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install gitbook-summary -g</div><div class="line">book sm</div></pre></td></tr></table></figure><a id="more"></a><h3 id="greed-summary"><a href="#greed-summary" class="headerlink" title="greed-summary"></a>greed-summary</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install greed-summary -g</div><div class="line">greed-summary</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="托管在gitbooks-io方式"><a href="#托管在gitbooks-io方式" class="headerlink" title="托管在gitbooks.io方式"></a>托管在<code>gitbooks.io</code>方式</h3><ol><li>在<a href="https://www.gitbook.com/" target="_blank" rel="external">Gitbook</a>关联GitHub仓库；</li><li>在笔记所在目录<code>gitbook init</code>会自动生成<code>SUMMARY.md</code>目录描述文件</li><li>编写Markdown笔记并使用<code>greed-summary</code>更新目录文件；</li><li>将代码提交到GitHub仓库即可更新Gitbook。</li></ol><h3 id="托管在GitHub-Pages方式"><a href="#托管在GitHub-Pages方式" class="headerlink" title="托管在GitHub Pages方式"></a>托管在<code>GitHub Pages</code>方式</h3><ul><li><p>在工程目录下使用<code>gitbook build</code>命令生成html文件，使用<code>gitbook serve</code>预览效果；</p></li><li><p>将自动生成的<code>_book</code>目录下的内容push到远程的<code>gh-pages</code>分支(只有分支名为<code>gh-pages</code>才有效)；</p></li><li><p>访问<code>https://{username}github.io/{repo_name}</code>即可查看效果</p></li></ul><h2 id="集成Travis-CI"><a href="#集成Travis-CI" class="headerlink" title="集成Travis CI"></a>集成Travis CI</h2><p>配置Travis CI:<a href="Travis-CI.html">Travis CI</a></p><p>在项目根目录新建<code>.travis.yml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">before_install:</div><div class="line">- &quot;./scripts/dependences.sh&quot; // 配置gitbook环境</div><div class="line">script:</div><div class="line">- &quot;travis_wait 30 sh ./scripts/build.sh&quot; //编译生成html文件</div><div class="line">after_success:</div><div class="line">- &quot;./scripts/deploy.sh&quot; // 将_book中的内容push到&apos;gh-pages&apos;分支</div></pre></td></tr></table></figure><p>脚本参考:</p><ul><li><a href="https://github.com/nicreals/Note/blob/master/scripts/dependences.sh" target="_blank" rel="external">dependences.sh</a></li><li><a href="https://github.com/nicreals/Note/blob/master/scripts/build.sh" target="_blank" rel="external">build.sh</a></li><li><a href="https://github.com/nicreals/Note/blob/master/scripts/deploy.sh" target="_blank" rel="external">deploy.sh</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Gitbook --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://toolchain.gitbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitbook文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装cli工具&quot;&gt;&lt;a href=&quot;#安装cli工具&quot; class=&quot;headerlink&quot; title=&quot;安装cli工具&quot;&gt;&lt;/a&gt;安装cli工具&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install gitbook -g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install gitbook-cli -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;自动生成SUMMARY&quot;&gt;&lt;a href=&quot;#自动生成SUMMARY&quot; class=&quot;headerlink&quot; title=&quot;自动生成SUMMARY&quot;&gt;&lt;/a&gt;自动生成SUMMARY&lt;/h2&gt;&lt;h3 id=&quot;gitbook-summary&quot;&gt;&lt;a href=&quot;#gitbook-summary&quot; class=&quot;headerlink&quot; title=&quot;gitbook-summary&quot;&gt;&lt;/a&gt;gitbook-summary&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install gitbook-summary -g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;book sm&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="Gitbook" scheme="http://nic_reals.gitee.io/blog/tags/Gitbook/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://nic_reals.gitee.io/blog/2016/10/22/Front/JavaScript/"/>
    <id>http://nic_reals.gitee.io/blog/2016/10/22/Front/JavaScript/</id>
    <published>2016-10-22T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:34.501Z</updated>
    
    <content type="html"><![CDATA[<!-- # JavaScript --><blockquote><p>问Java和JavaScript有什么关系？</p><p>雷锋和雷锋塔的关系</p></blockquote><h2 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h2><h3 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h3><p>使用<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果； 使用<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。 由于JavaScript这个设计缺陷，尽量避免使用<code>==</code>比较。</p><h3 id="null-undefined-NaN"><a href="#null-undefined-NaN" class="headerlink" title="null/undefined/NaN"></a>null/undefined/NaN</h3><p>表示值为空，大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。</p><p>NaN表示函数返回值为空。</p><a id="more"></a><h3 id="strict-mode"><a href="#strict-mode" class="headerlink" title="strict mode"></a>strict mode</h3><p>如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量, 可以启用用<code>strict模式</code>强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误(部分浏览器支持),</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;; //写在JavaScript文件第一行，不支持的浏览器会将其当做字符串</div></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>除了使用<code>+</code>号连接字符串，还可以使用<code>${var}</code>的方式替换<code>var</code>的值,<strong>并用&lt;`&gt;符号包裹</strong>，简化书写(ES6新增)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var name = &apos;hole&apos;;</div><div class="line">var age = 20;</div><div class="line">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</div></pre></td></tr></table></figure><p>字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var s = &apos;Test&apos;;</div><div class="line">s[0] = &apos;X&apos;;</div><div class="line">alert(s); // s仍然为&apos;Test&apos;</div></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>Array元素的增删：Ò</p><table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td>push(item1,item2)</td><td>向<code>Array</code>的末尾添加若干元素</td></tr><tr><td>pop()</td><td>删除<code>Array</code>的最后一个元素</td></tr><tr><td>unshift(item1,item2)</td><td>向<code>Array</code>的头部添加若干元素</td></tr><tr><td>shift()</td><td>删除<code>Array</code>的第一个元素</td></tr></tbody></table><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>JavaScript对象为动态类型，对象属性可以自由添加删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var ass = &#123;</div><div class="line">    name: &apos;hole&apos;</div><div class="line">&#125;;</div><div class="line">ass.age; // undefined</div><div class="line">ass.age = 40; // 新增一个age属性</div><div class="line">ass.age; // 40</div><div class="line">delete ass.age; // 删除age属性</div></pre></td></tr></table></figure><p><code>in</code>用于判断对象及其父对象是否拥有一个属性或者方法;</p><p><code>hasOwnProperty</code>用于判断对象是否拥有一个属性;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var ass = &#123;</div><div class="line">    name: &apos;hole&apos;</div><div class="line">&#125;;</div><div class="line">var mobile = [&apos;聂锐&apos;，&apos;hole&apos;，&apos;老铁&apos;，&apos;林飞浪&apos;];</div><div class="line">ass.hasOwnProperty(&apos;name&apos;); // true</div><div class="line">mobile.hasOwnProperty(&apos;join&apos;); // false hasOwnProperty不能用来判定方法</div><div class="line">&apos;join&apos; in mobile  //true in关键字可以判定是否包含属性和方法</div></pre></td></tr></table></figure><h3 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h3><p>集合类型的遍历有<code>for ... in</code>,<code>for ... of</code>,<code>forEach()</code>三种方式：</p><p><code>for … in</code>遍历集合对象的属性/key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">a.name = &apos;Hello&apos;;</div><div class="line">for (var x in a) &#123;</div><div class="line">    alert(x); // &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;name&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>for ... of</code>遍历集合对象的键值/value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">a.name = &apos;Hello&apos;;</div><div class="line">for (var x of a) &#123;</div><div class="line">    alert(x); // &apos;A&apos;, &apos;B&apos;, &apos;C&apos;  新增的name为属性，并不是Array对象a的元素</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>forEach()</code>遍历集合对象时似乎不能被中断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">a.forEach(function (element, index, array) &#123;</div><div class="line">    // element: 指向当前元素的值</div><div class="line">    // index: 指向当前索引</div><div class="line">    // array: 指向Array对象本身</div><div class="line">    alert(element);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><p>JavaScript允许传入任意个数的参数，定义一个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function abs(x) &#123;</div><div class="line">    if (x &gt;= 0) &#123;</div><div class="line">        return x;</div><div class="line">    &#125; else &#123;</div><div class="line">        return -x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当参数比定义的参数个数多时不受影响：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">abs(10, &apos;blablabla&apos;); // 返回10</div><div class="line">abs(-9, &apos;haha&apos;, &apos;hehe&apos;, null); // 返回9</div></pre></td></tr></table></figure><p>当参数比定义的参数个数少时返回<code>NaN</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abs(); // 返回NaN</div></pre></td></tr></table></figure><p>使用<code>arguments</code>可以获取函数调用时传入的说有参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function foo(x) &#123;</div><div class="line">    alert(x); // 10</div><div class="line">    for (var i=0; i&lt;arguments.length; i++) &#123;</div><div class="line">        alert(arguments[i]); // 10, 20, 30</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foo(10, 20, 30);</div></pre></td></tr></table></figure><p>使用<code>...rest</code>获取已定义参数之外的参数(ES6标准):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function foo(a, b, ...rest) &#123;</div><div class="line">    console.log(&apos;a = &apos; + a);</div><div class="line">    console.log(&apos;b = &apos; + b);</div><div class="line">    console.log(rest);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(1, 2, 3, 4, 5);</div><div class="line">// 结果:</div><div class="line">// a = 1</div><div class="line">// b = 2</div><div class="line">// Array [ 3, 4, 5 ]</div><div class="line"></div><div class="line">foo(1);</div><div class="line">// 结果:</div><div class="line">// a = 1</div><div class="line">// b = undefined</div><div class="line">// Array []</div></pre></td></tr></table></figure><h3 id="var-amp-let-amp-const"><a href="#var-amp-let-amp-const" class="headerlink" title="var &amp; let &amp; const"></a>var &amp; let &amp; const</h3><p>在函数内部使用<code>var</code>声明的变量在整个函数声明周期中都可以访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">function foo() &#123;</div><div class="line">    console.log(temp); // undefined 没有报错，JavaScript会扫描整个函数体，将声明的变量&quot;提升至函数顶部&quot;</div><div class="line">    for (var i=0; i&lt;100; i++) &#123;</div><div class="line">    &#125;</div><div class="line">    console.log(i); // 100 可以访问var变量</div><div class="line">    var temp = i;</div><div class="line">&#125;</div><div class="line">foo()</div></pre></td></tr></table></figure><p>使用<code>let</code>声明的变量只能局部访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    for (let i=0; i&lt;100; i++) &#123;</div><div class="line">    &#125;</div><div class="line">    console.log(i); // SyntaxError</div><div class="line">&#125;</div><div class="line">foo()</div></pre></td></tr></table></figure><p>使用<code>const</code>可以定义一个常量，和<code>let</code>一样只能局部访问:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">const PI = 3.14;</div><div class="line">PI = 3; // 某些浏览器不报错，但是无效果！</div><div class="line">PI; // 3.14</div></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>以下代码<code>this</code>的指代都很清楚：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function getAge() &#123;</div><div class="line">    var y = new Date().getFullYear();</div><div class="line">    return y - this.birth;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var ass = &#123;</div><div class="line">    name: &apos;hole&apos;,</div><div class="line">    birth: 1985,</div><div class="line">    age: getAge</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ass.age(); // 31, 正常结果</div><div class="line">getAge(); // NaN</div></pre></td></tr></table></figure><p>要保证<code>this</code>指代正确，函数调用必须使用<code>this.xxx</code>的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var fn = ass.age; // 先拿到ass的age函数</div><div class="line">fn(); // NaN    what the fuck！</div></pre></td></tr></table></figure><p>对象内部函数<code>this</code>指代同样有坑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var ass = &#123;</div><div class="line">    name: &apos;hole&apos;,</div><div class="line">    birth: 1985,</div><div class="line">    age: function () &#123;</div><div class="line">        function getAgeFromBirth() &#123;</div><div class="line">            var y = new Date().getFullYear();</div><div class="line">            return y - this.birth;</div><div class="line">        &#125;</div><div class="line">        return getAgeFromBirth();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ass.age(); // 指代undefined Uncaught TypeError: Cannot read property &apos;birth&apos; of undefined 如果不用strict模式，this将指代window对象</div></pre></td></tr></table></figure><p>使用<code>that</code>变量捕获<code>this</code>解决指代问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var ass = &#123;</div><div class="line">    name: &apos;hole&apos;,</div><div class="line">    birth: 1985,</div><div class="line">    age: function () &#123;</div><div class="line">        var that = this; // 在方法内部一开始就捕获this</div><div class="line">        function getAgeFromBirth() &#123;</div><div class="line">            var y = new Date().getFullYear();</div><div class="line">            return y - that.birth; // 用that而不是this</div><div class="line">        &#125;</div><div class="line">        return getAgeFromBirth();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ass.age(); // 31</div></pre></td></tr></table></figure><p>使用<code>apply()</code>,<code>call()</code>解决<code>this</code>指代问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function getMoney(x) &#123;</div><div class="line">    return x + this.birth;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var ass = &#123;</div><div class="line">    name: &apos;hole&apos;,</div><div class="line">    birth: 1985,</div><div class="line">    money: getMoney</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ass.age(10000); // 11985</div><div class="line">getMoney.apply(ass, [10000]); // 11985, 参数ass指定调用对象 参数打包成Array传入</div><div class="line">getMoney.call(ass,10000); // 11985,参数ass指定调用对象 参数直接传入</div></pre></td></tr></table></figure><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>有如下代码，由于<code>f1</code>,<code>f2</code>,<code>f3</code>引用了变量<code>i</code>,但这三个函数并不会立即执行，当执行是<code>i</code>的值为4，所以函数返回全都是16；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function count() &#123;</div><div class="line">    var arr = [];</div><div class="line">    for (var i=1; i&lt;=3; i++) &#123;</div><div class="line">        arr.push(function () &#123;</div><div class="line">            return i * i;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    return arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var results = count();</div><div class="line">var f1 = results[0];</div><div class="line">var f2 = results[1];</div><div class="line">var f3 = results[2];</div><div class="line">f1(); // 16 WTF!</div><div class="line">f2(); // 16</div><div class="line">f3(); // 16</div></pre></td></tr></table></figure><p>利用闭包可以实现立即执行的匿名函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function count() &#123;</div><div class="line">    var arr = [];</div><div class="line">    for (var i=1; i&lt;=3; i++) &#123;</div><div class="line">        arr.push((function (n) &#123;</div><div class="line">            return function () &#123;</div><div class="line">                return n * n;</div><div class="line">            &#125;</div><div class="line">        &#125;)(i));</div><div class="line">    &#125;</div><div class="line">    return arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var results = count();</div><div class="line">var f1 = results[0];</div><div class="line">var f2 = results[1];</div><div class="line">var f3 = results[2];</div><div class="line"></div><div class="line">f1(); // 1</div><div class="line">f2(); // 4</div><div class="line">f3(); // 9</div></pre></td></tr></table></figure><p>通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function (x) &#123;</div><div class="line">    return x * x;</div><div class="line">&#125;)(3);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- # JavaScript --&gt;
&lt;blockquote&gt;
&lt;p&gt;问Java和JavaScript有什么关系？&lt;/p&gt;
&lt;p&gt;雷锋和雷锋塔的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Foundation&quot;&gt;&lt;a href=&quot;#Foundation&quot; class=&quot;headerlink&quot; title=&quot;Foundation&quot;&gt;&lt;/a&gt;Foundation&lt;/h2&gt;&lt;h3 id=&quot;Equality&quot;&gt;&lt;a href=&quot;#Equality&quot; class=&quot;headerlink&quot; title=&quot;Equality&quot;&gt;&lt;/a&gt;Equality&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;==&lt;/code&gt;比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果； 使用&lt;code&gt;===&lt;/code&gt;比较，它不会自动转换数据类型，如果数据类型不一致，返回&lt;code&gt;false&lt;/code&gt;，如果一致，再比较。 由于JavaScript这个设计缺陷，尽量避免使用&lt;code&gt;==&lt;/code&gt;比较。&lt;/p&gt;
&lt;h3 id=&quot;null-undefined-NaN&quot;&gt;&lt;a href=&quot;#null-undefined-NaN&quot; class=&quot;headerlink&quot; title=&quot;null/undefined/NaN&quot;&gt;&lt;/a&gt;null/undefined/NaN&lt;/h3&gt;&lt;p&gt;表示值为空，大多数情况下，我们都应该用&lt;code&gt;null&lt;/code&gt;。&lt;code&gt;undefined&lt;/code&gt;仅仅在判断函数参数是否传递的情况下有用。&lt;/p&gt;
&lt;p&gt;NaN表示函数返回值为空。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://nic_reals.gitee.io/blog/tags/JavaScript/"/>
    
      <category term="Front" scheme="http://nic_reals.gitee.io/blog/tags/Front/"/>
    
  </entry>
  
  <entry>
    <title>Network</title>
    <link href="http://nic_reals.gitee.io/blog/2016/09/26/CS/Network/"/>
    <id>http://nic_reals.gitee.io/blog/2016/09/26/CS/Network/</id>
    <published>2016-09-26T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:43.675Z</updated>
    
    <content type="html"><![CDATA[<!-- # Network --><blockquote><p><a href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html" target="_blank" rel="external">HTTP面试基础</a></p><p><a href="http://www.jellythink.com/archives/705" target="_blank" rel="external">TCP连接的三次握手与四次分手</a></p><p><a href="http://www.jianshu.com/p/4b9d43c0571a" target="_blank" rel="external">计算机网络结构</a></p></blockquote><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li>HTTP构建于TCP/IP协议之上，默认端口号是80</li><li>HTTP是无连接无状态的</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。</p><h2 id="HTTP请求与响应"><a href="#HTTP请求与响应" class="headerlink" title="HTTP请求与响应"></a>HTTP请求与响应</h2><p>HTTP 请求由三部分组成：</p><ul><li>请求行</li><li>请求头</li><li>请求正文</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 请求行</div><div class="line">POST /index.php HTTP/1.1</div><div class="line"></div><div class="line">// 请求头</div><div class="line">Host: localhost</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-cn,zh;q=0.5</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Connection: keep-alive</div><div class="line">Referer: http://localhost/</div><div class="line">Content-Length：25</div><div class="line">Content-Type：application/x-www-form-urlencoded</div><div class="line"></div><div class="line">// 请求正文</div><div class="line">username=aa&amp;password=1234</div></pre></td></tr></table></figure><p>HTTP响应也由3个部分构成，分别是：</p><ul><li>状态行</li><li>响应头(Response Header)</li><li>响应正文</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 响应行</div><div class="line">HTTP/1.1 200 OK</div><div class="line"></div><div class="line">// 响应头</div><div class="line">Server:Apache Tomcat/5.0.12</div><div class="line">Date:Mon,6Oct2003 13:23:42 GMT</div><div class="line">Content-Length:112</div><div class="line"></div><div class="line">// 响应正文</div><div class="line">&lt;html&gt;...</div></pre></td></tr></table></figure><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>响应码可根据第一位数字分五类表示：</p><ul><li>1xx：信息，请求收到，继续处理</li><li>2xx：成功，行为被成功地接受、理解和采纳</li><li>3xx：重定向，为了完成请求，必须进一步执行的动作</li><li>4xx：客户端错误，请求包含语法错误或者请求无法实现</li><li>5xx：服务器错误，服务器不能实现一种明显无效的请求</li></ul><p>几个常用状态码示意：</p><table><thead><tr><th style="text-align:left">Code</th><th style="text-align:center">Descriptions</th></tr></thead><tbody><tr><td style="text-align:left">200</td><td style="text-align:center">OK 客户端请求成功</td></tr><tr><td style="text-align:left">301</td><td style="text-align:center">Moved Permanently 请求永久重定向</td></tr><tr><td style="text-align:left">302</td><td style="text-align:center">Moved Temporarily 请求临时重定向</td></tr><tr><td style="text-align:left">304</td><td style="text-align:center">Not Modified 文件未修改，可以直接使用缓存的文件。</td></tr><tr><td style="text-align:left">400</td><td style="text-align:center">Bad Request 由于客户端请求有语法错误，不能被服务器所理解。</td></tr><tr><td style="text-align:left">401</td><td style="text-align:center">Unauthorized 请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用</td></tr><tr><td style="text-align:left">403</td><td style="text-align:center">Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</td></tr><tr><td style="text-align:left">404</td><td style="text-align:center">Not Found 请求的资源不存在，例如，输入了错误的URL</td></tr><tr><td style="text-align:left">500</td><td style="text-align:center">Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。</td></tr><tr><td style="text-align:left">503</td><td style="text-align:center">Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</td></tr></tbody></table><h2 id="交互方式"><a href="#交互方式" class="headerlink" title="交互方式"></a>交互方式</h2><p>HTTP定义了<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>四种最基本的与服务器交互方式，<code>URL</code>全称为统一资源定位符，用于描述网络上的一个资源，可以认为而 HTTP 中的<code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>就对应着对这个资源的查，改，增，删4个操作。</p><p><code>GET</code>与<code>POST</code>请求的区别:</p><ul><li><code>GET</code>请求将请求数据放在URL里，和<code>POST</code>则将请求数据放在请求主体中；</li><li>虽然HTTP没有对请求数据大小做限制，但<code>GET</code>请求实际会受到浏览器URL输入长度限制，而<code>POST</code>请求理论上不受限制；</li><li><code>POST</code>请求相对于<code>GET</code>请求相对安全</li></ul><p>其他交互方式：</p><table><thead><tr><th style="text-align:left">Method</th><th style="text-align:center">Descriptions</th></tr></thead><tbody><tr><td style="text-align:left">HEAD</td><td style="text-align:center">与 GET 相同，但只返回 HTTP 报头，不返回文档主体。</td></tr><tr><td style="text-align:left">OPTIONS</td><td style="text-align:center">返回服务器支持的 HTTP 方法。</td></tr><tr><td style="text-align:left">CONNECT</td><td style="text-align:center">把请求连接转换到透明的 TCP/IP 通道。</td></tr></tbody></table><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ul><li>TCP提供一种面向连接的、可靠的字节流服务<br>在一个TCP连接中，仅有两方进行彼此通信。广播和多播不能用于TCP</li><li>TCP使用校验和，确认和重传机制来保证可靠传输</li><li>TCP使用累积确认</li><li>TCP使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li></ul><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ul><li>第一次握手：建立连接。客户端发送连接请求报文段，将<code>SYN</code>位置为1，<code>Sequence Number</code>为x；然后，客户端进入<code>SYN_SEND</code>状态，等待服务器的确认；</li><li>第二次握手：服务器收到<code>SYN</code>报文段。服务器收到客户端的<code>SYN</code>报文段，需要对这个<code>SYN</code>报文段进行确认，设置<code>Acknowledgment Number</code>为x+1(<code>Sequence Number</code>+1)；同时，自己自己还要发送<code>SYN</code>请求信息，将<code>SYN</code>位置为1，<code>Sequence Number</code>为y；服务器端将上述所有信息放到一个报文段（即<code>SYN</code>+<code>ACK</code>报文段）中，一并发送给客户端，此时服务器进入<code>SYN_RECV</code>状态；</li><li>第三次握手：客户端收到服务器的<code>SYN</code>+<code>ACK</code>报文段。然后将<code>Acknowledgment Number</code>设置为y+1，向服务器发送<code>ACK</code>报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</li></ul><p><img src="../IMG/tcp_connect.png" alt="tcp_connect"></p><h3 id="四次分手"><a href="#四次分手" class="headerlink" title="四次分手"></a>四次分手</h3><ul><li>第一次分手：主机1（可以使客户端，也可以是服务器端），设置<code>Sequence Number</code>和<code>Acknowledgment Number</code>，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；</li><li>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个<code>ACK</code>报文段，<code>Acknowledgment Number</code>为<code>Sequence Number</code>加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；</li><li>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入<code>LAST_ACK</code>状态；</li><li>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送<code>ACK</code>报文段，然后主机1进入<code>TIME_WAIT</code>状态；主机2收到主机1的<code>ACK</code>报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</li></ul><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><h3 id="OSI结构"><a href="#OSI结构" class="headerlink" title="OSI结构"></a>OSI结构</h3><p><img src="../IMG/osi_struct.png" alt="osi_struct"></p><h3 id="TCP-IP结构"><a href="#TCP-IP结构" class="headerlink" title="TCP/IP结构"></a>TCP/IP结构</h3><p><img src="../IMG/tcp_struct.png" alt="tcp_struct"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Network --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hit-alibaba.github.io/interview/basic/network/HTTP.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP面试基础&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jellythink.com/archives/705&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TCP连接的三次握手与四次分手&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/4b9d43c0571a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机网络结构&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTTP构建于TCP/IP协议之上，默认端口号是80&lt;/li&gt;
&lt;li&gt;HTTP是无连接无状态的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。&lt;/p&gt;
&lt;h2 id=&quot;HTTP请求与响应&quot;&gt;&lt;a href=&quot;#HTTP请求与响应&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求与响应&quot;&gt;&lt;/a&gt;HTTP请求与响应&lt;/h2&gt;&lt;p&gt;HTTP 请求由三部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;请求头&lt;/li&gt;
&lt;li&gt;请求正文&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CS" scheme="http://nic_reals.gitee.io/blog/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>Design Pattern</title>
    <link href="http://nic_reals.gitee.io/blog/2016/09/24/CS/Design-Pattern/"/>
    <id>http://nic_reals.gitee.io/blog/2016/09/24/CS/Design-Pattern/</id>
    <published>2016-09-24T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:47.340Z</updated>
    
    <content type="html"><![CDATA[<!-- # Design Pattern --><blockquote><p><a href="https://github.com/skyming/Trip-to-iOS-Design-Patterns" target="_blank" rel="external">iOS 设计模式之旅</a></p><p><a href="http://www.jianshu.com/p/b849c6972216" target="_blank" rel="external">MVC,MVP,MMVM,VIPER设计模式区别</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="external">MVC,MVP,MMVM图示</a></p></blockquote><p>在软件设计领域，设计模式是对通用问题的可复用的解决方案。设计模式是一系列帮你写出更可理解和复用代码的模板，设计模式帮你创建松耦合的代码以便你不需要费多大力就可以改变或者替换代码中的组件。</p><a id="more"></a><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>理想状态下的<code>MVC</code>结构：</p><p><img src="../IMG/mvc_struct.png" alt="mvc_struct"></p><p>模型会把任何数据的变更通知控制器，然后控制器更新视图数据。视图对象通知控制器用户的操作，控制器要么根据需要来更新模型，要么检索任何被请求的数据。</p><p><code>Model</code>: 模型保存应用程序的数据，定义了怎么去操作它;</p><p><code>View</code>: 视图是模型的可视化表示以及用户交互的控件；基本上来说，所有的UIView对象以及它的子类都属于视图;</p><p><code>Controller</code>: 控制器是一个协调所有工作的中介者（Mediator）。它访问模型中的数据并在视图中展示它们，同时它们还监听事件和根据需要操作数据;</p><p>实际中<code>Model</code>和<code>View</code>容易耦合在一起，并且<code>Controller</code>非常臃肿，不利于但愿测试。</p><h2 id="MVP模式"><a href="#MVP模式" class="headerlink" title="MVP模式"></a>MVP模式</h2><p><img src="../IMG/mvp_struct.png" alt="mvp_struct"></p><p><code>MVP</code>模式将<code>Controller</code>变为<code>Presenter</code>,同时各组件之间的通信方向发生改变。</p><ul><li>各部分之间的通信，都是双向的。</li><li>View 与 Model 不发生联系，都通过 Presenter 传递。</li><li>View不参与任何逻辑，称为<code>被动视图</code>(Passive View),而所有逻辑都放在了Presenter中</li><li>相对于<code>MVC</code>模式开发速度会降低，但是View和Model不再耦合，结构更清晰，利于单元测试。</li></ul><h2 id="MMVM模式"><a href="#MMVM模式" class="headerlink" title="MMVM模式"></a>MMVM模式</h2><p><img src="../IMG/mmvm_struct.png" alt="mmvm_struct"></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式确保一个类只有一个实例存在，并且该实例可以全局访问。</p><p>Objective-C中的单例实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+ (ShareClass *)sharedInstance &#123;</div><div class="line">    static ShareClass *_share = nil;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        _share = [[self alloc] init];</div><div class="line">    &#125;);</div><div class="line">    return _share;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Swift中的单例实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class ShareClass &#123;</div><div class="line">    public static let shared : ShareClass = ShareClass()</div><div class="line">    private init() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="外观-Facade-模式"><a href="#外观-Facade-模式" class="headerlink" title="外观(Facade)模式"></a>外观(Facade)模式</h2><p><code>外观模式</code>将细节封装起来，多个类实现的功能只暴露单一的接口，降低了用户对内部细节的依赖性，当内部实现细节发生变化时，<code>外观模式</code>保持原样的接口，降低了项目的维护难度。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Design Pattern --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/skyming/Trip-to-iOS-Design-Patterns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 设计模式之旅&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/b849c6972216&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVC,MVP,MMVM,VIPER设计模式区别&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVC,MVP,MMVM图示&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在软件设计领域，设计模式是对通用问题的可复用的解决方案。设计模式是一系列帮你写出更可理解和复用代码的模板，设计模式帮你创建松耦合的代码以便你不需要费多大力就可以改变或者替换代码中的组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="http://nic_reals.gitee.io/blog/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>RunLoop</title>
    <link href="http://nic_reals.gitee.io/blog/2016/09/09/iOS/RunLoop/"/>
    <id>http://nic_reals.gitee.io/blog/2016/09/09/iOS/RunLoop/</id>
    <published>2016-09-09T15:33:37.000Z</published>
    <updated>2017-10-26T13:04:11.720Z</updated>
    
    <content type="html"><![CDATA[<!-- # RunLoop --><blockquote><p><a href="http://www.cnblogs.com/6duxz/p/4633741.html" target="_blank" rel="external">UIScrollView滚动时NSTimer停止问题</a></p><p><a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/Runloop.html" target="_blank" rel="external">RunLoop简介</a></p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>一种事件循环，是<code>Source</code>和<code>Observer</code>的集合，循环监听<code>Input Source</code>和<code>Timer Source</code>中的消息事件，然后在线程中处理这些事件。</p><h2 id="Runloop-与线程"><a href="#Runloop-与线程" class="headerlink" title="Runloop 与线程"></a>Runloop 与线程</h2><p>Runloop 和线程是绑定在一起的。每个线程（包括主线程）都有一个对应的 Runloop 对象。我们并不能自己创建 Runloop 对象，但是可以获取到系统提供的 Runloop 对象。</p><p>主线程的 Runloop 会在应用启动的时候完成启动，其他线程的 Runloop 默认并不会启动，需要我们手动启动。</p><a id="more"></a><h2 id="Input-Source-和-Timer-Source"><a href="#Input-Source-和-Timer-Source" class="headerlink" title="Input Source 和 Timer Source"></a>Input Source 和 Timer Source</h2><p>这两个都是 Runloop 事件的来源，其中 Input Source 又可以分为三类</p><ul><li>Port-Based Sources，系统底层的 Port 事件，例如 CFSocketRef ，在应用层基本用不到</li><li>Custom Input Sources，用户手动创建的 Source</li><li>Cocoa Perform Selector Sources， Cocoa 提供的 performSelector 系列方法，也是一种事件源</li></ul><p>Timer Source 顾名思义就是指定时器事件了。</p><h2 id="Runloop工作特点："><a href="#Runloop工作特点：" class="headerlink" title="Runloop工作特点："></a>Runloop工作特点：</h2><ul><li><p>当有事件发生时，Runloop会根据具体的事件类型通知应用程序作出响应；</p></li><li><p>当没有事件发生时，Runloop会进入休眠状态，从而达到省电的目的；</p></li><li><p>当事件再次发生时，Runloop会被重新唤醒，处理事件。</p></li></ul><h2 id="ScrollView滚动时NSTimer停止问题"><a href="#ScrollView滚动时NSTimer停止问题" class="headerlink" title="ScrollView滚动时NSTimer停止问题"></a>ScrollView滚动时NSTimer停止问题</h2><p>当UIScrollView滚动时，<code>MainRunLoop</code>处于<code>UITrackingRunLoopMode</code>模式下，此时不会处理<code>NSDefaultRunLoopMode</code>的消息，创建NSTimer时将其加入到<code>NSRunLoopCommonModes</code>即可</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- # RunLoop --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/6duxz/p/4633741.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UIScrollView滚动时NSTimer停止问题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/Runloop.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RunLoop简介&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;一种事件循环，是&lt;code&gt;Source&lt;/code&gt;和&lt;code&gt;Observer&lt;/code&gt;的集合，循环监听&lt;code&gt;Input Source&lt;/code&gt;和&lt;code&gt;Timer Source&lt;/code&gt;中的消息事件，然后在线程中处理这些事件。&lt;/p&gt;
&lt;h2 id=&quot;Runloop-与线程&quot;&gt;&lt;a href=&quot;#Runloop-与线程&quot; class=&quot;headerlink&quot; title=&quot;Runloop 与线程&quot;&gt;&lt;/a&gt;Runloop 与线程&lt;/h2&gt;&lt;p&gt;Runloop 和线程是绑定在一起的。每个线程（包括主线程）都有一个对应的 Runloop 对象。我们并不能自己创建 Runloop 对象，但是可以获取到系统提供的 Runloop 对象。&lt;/p&gt;
&lt;p&gt;主线程的 Runloop 会在应用启动的时候完成启动，其他线程的 Runloop 默认并不会启动，需要我们手动启动。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://nic_reals.gitee.io/blog/tags/iOS/"/>
    
      <category term="RunLoop" scheme="http://nic_reals.gitee.io/blog/tags/RunLoop/"/>
    
  </entry>
  
  <entry>
    <title>Tools</title>
    <link href="http://nic_reals.gitee.io/blog/2016/08/20/Gear/Tools/"/>
    <id>http://nic_reals.gitee.io/blog/2016/08/20/Gear/Tools/</id>
    <published>2016-08-20T15:33:37.000Z</published>
    <updated>2017-10-26T13:05:42.853Z</updated>
    
    <content type="html"><![CDATA[<!-- # Tools --><ul><li><a href="https://github.com/ImageOptim/ImageOptim" target="_blank" rel="external">ImageOptim</a> - Mac端图片压缩GUI工具</li><li><a href="https://github.com/tinymind/LSUnusedResources" target="_blank" rel="external">LSUnusedResources</a> - 查找Xcode工程中未使用的图片</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- # Tools --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ImageOptim/ImageOptim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageOptim&lt;/a&gt; - Mac端图片压缩GUI工具&lt;/
      
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://nic_reals.gitee.io/blog/2016/08/20/Gear/Git/"/>
    <id>http://nic_reals.gitee.io/blog/2016/08/20/Gear/Git/</id>
    <published>2016-08-20T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:11.853Z</updated>
    
    <content type="html"><![CDATA[<!-- # Git --><h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"聂锐"</span></div><div class="line"></div><div class="line">git config --global user.email nic.reals@outlook.com</div><div class="line"></div><div class="line">git config --global http.proxy <span class="string">'socks5://127.0.0.1:1080'</span>  //配置git使用shadowsocks的sock5代理 同理设置https代理</div><div class="line">git config --global --get http.proxy //获取当前http代理地址</div><div class="line">git config --global --<span class="built_in">unset</span> http.proxy // 撤销http代理设置</div></pre></td></tr></table></figure><a id="more"></a><h2 id="常规用法"><a href="#常规用法" class="headerlink" title="常规用法"></a>常规用法</h2><ul><li><p>删除远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete &#123;branch&#125; // 注意冒号的书写位置</div></pre></td></tr></table></figure></li><li><p>初始化Git仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git remote add origin &#123;remote url&#125;</div><div class="line">git push -u origin master // 只有&quot;push -u&quot; 到远程仓库之后才能创建分支</div><div class="line">git checkout -b &#123;new branch name&#125;</div><div class="line">git branch --list</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Git --&gt;
&lt;h2 id=&quot;初始化设置&quot;&gt;&lt;a href=&quot;#初始化设置&quot; class=&quot;headerlink&quot; title=&quot;初始化设置&quot;&gt;&lt;/a&gt;初始化设置&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;聂锐&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.email nic.reals@outlook.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global http.proxy &lt;span class=&quot;string&quot;&gt;&#39;socks5://127.0.0.1:1080&#39;&lt;/span&gt;  //配置git使用shadowsocks的sock5代理 同理设置https代理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global --get http.proxy //获取当前http代理地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global --&lt;span class=&quot;built_in&quot;&gt;unset&lt;/span&gt; http.proxy // 撤销http代理设置&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="Git" scheme="http://nic_reals.gitee.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Shell</title>
    <link href="http://nic_reals.gitee.io/blog/2016/08/01/Gear/Shell/"/>
    <id>http://nic_reals.gitee.io/blog/2016/08/01/Gear/Shell/</id>
    <published>2016-08-01T15:33:37.000Z</published>
    <updated>2017-10-26T13:05:48.350Z</updated>
    
    <content type="html"><![CDATA[<!-- # Shell --><blockquote><p><a href="https://github.com/hokein/Wiki/wiki/Bash-Shell%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE" target="_blank" rel="external">Shell常用快捷键</a></p></blockquote><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table><thead><tr><th style="text-align:left">Descriptions</th><th style="text-align:center">ShortCut</th></tr></thead><tbody><tr><td style="text-align:left">删除光标左边所有</td><td style="text-align:center">ctrl-U</td></tr><tr><td style="text-align:left">删除光标右边所有</td><td style="text-align:center">ctrl-K</td></tr><tr><td style="text-align:left">移动光标到行首</td><td style="text-align:center">ctrl-A</td></tr><tr><td style="text-align:left">移动光标到行尾</td><td style="text-align:center">ctrl-E</td></tr></tbody></table><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod + x ass.file //设置文件权限</div><div class="line">mv ass.file filename //更改文件名</div></pre></td></tr></table></figure><a id="more"></a><h2 id="关闭gatekeeper"><a href="#关闭gatekeeper" class="headerlink" title="关闭gatekeeper"></a>关闭gatekeeper</h2><p>关闭<code>gatekeeper</code>可以允许Mac安装任何来源的APP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo spctl --master-disable</div></pre></td></tr></table></figure><h2 id="bash-设置socks5代理"><a href="#bash-设置socks5代理" class="headerlink" title="bash 设置socks5代理"></a>bash 设置socks5代理</h2><p>在<code>~/.bashrc</code>文件中加入如下function:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">setproxy</span></span>() &#123;</div><div class="line">    <span class="comment"># export &#123;HTTP,HTTPS,FTP&#125;_PROXY="http://127.0.0.1:3128"</span></div><div class="line">    <span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">unsetproxy</span></span>() &#123;</div><div class="line">    <span class="comment"># unset &#123;HTTP,HTTPS,FTP&#125;_PROXY</span></div><div class="line">    <span class="built_in">unset</span> ALL_PROXY</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Fish-Shell"><a href="#Fish-Shell" class="headerlink" title="Fish Shell"></a>Fish Shell</h2><ul><li>设置fish为默认shell</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chsh -s /usr/<span class="built_in">local</span>/bin/fish</div><div class="line"><span class="built_in">echo</span> /usr/<span class="built_in">local</span>/bin/fish | sudo tee -a /etc/shells</div></pre></td></tr></table></figure><ul><li>安装OMF</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -L github.com/oh-my-fish/oh-my-fish/raw/master/bin/install | fish</div><div class="line">omf <span class="built_in">help</span></div><div class="line">omf install pure</div><div class="line">omf theme pure</div></pre></td></tr></table></figure><ul><li>fish中安装rvm</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">omf install rvm</div><div class="line">rvm install x.x</div><div class="line">rvm use x.x</div></pre></td></tr></table></figure><h2 id="在shell当前session中设置代理"><a href="#在shell当前session中设置代理" class="headerlink" title="在shell当前session中设置代理"></a>在shell当前session中设置代理</h2><ul><li>在<code>~/.config/fish/functions</code>创建<code>setproxy.fish</code>文件并设置如下function:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> setproxy</div><div class="line">  <span class="built_in">export</span> http_proxy=http://127.0.0.1:1087;<span class="built_in">export</span> https_proxy=http://127.0.0.1:1087;</div><div class="line">  <span class="built_in">echo</span> <span class="string">"====== current socks proxy:"</span><span class="variable">$https_proxy</span><span class="string">"======"</span></div><div class="line">end</div></pre></td></tr></table></figure><ul><li>在<code>~/.config/fish/functions</code>创建<code>unsetproxy.fish</code>文件并设置如下function:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function unsetproxy</div><div class="line">  set -e http_proxy</div><div class="line">  set -e https_proxy</div><div class="line">  echo &apos;====== current shell session proxy is erased ======&apos;</div><div class="line">end</div></pre></td></tr></table></figure><ul><li>测试更改是否生效</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -i http://ip.cn</div></pre></td></tr></table></figure><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><ol><li>设置socks5代理</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -x 127.0.0.1:1086 &#123;url&#125;</div></pre></td></tr></table></figure><h2 id="nvm-fish"><a href="#nvm-fish" class="headerlink" title="nvm-fish"></a>nvm-fish</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/Alex7Kom/nvm-fish.git ~/.nvm-fish</div><div class="line">source ~/.nvm-fish/nvm.fish</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Shell --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hokein/Wiki/wiki/Bash-Shell%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shell常用快捷键&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;常用快捷键&quot;&gt;&lt;a href=&quot;#常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;常用快捷键&quot;&gt;&lt;/a&gt;常用快捷键&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Descriptions&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;ShortCut&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除光标左边所有&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ctrl-U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;删除光标右边所有&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ctrl-K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动光标到行首&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ctrl-A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;移动光标到行尾&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ctrl-E&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;chmod + x ass.file //设置文件权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mv ass.file filename //更改文件名&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="Shell" scheme="http://nic_reals.gitee.io/blog/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Mac</title>
    <link href="http://nic_reals.gitee.io/blog/2016/07/09/Gear/Mac/"/>
    <id>http://nic_reals.gitee.io/blog/2016/07/09/Gear/Mac/</id>
    <published>2016-07-09T15:33:37.000Z</published>
    <updated>2017-10-26T13:06:00.517Z</updated>
    
    <content type="html"><![CDATA[<!-- # Mac --><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th style="text-align:left">Descriptions</th><th style="text-align:center">ShortCut</th></tr></thead><tbody><tr><td style="text-align:left">Finder下显示/隐藏文件</td><td style="text-align:center">cmd-shift-.</td></tr><tr><td style="text-align:left">强制退出程序</td><td style="text-align:center">cmd-alt-esc</td></tr><tr><td style="text-align:left">全屏截图</td><td style="text-align:center">cmd-shift-3</td></tr><tr><td style="text-align:left">局部截图</td><td style="text-align:center">cmd-shift-4</td></tr><tr><td style="text-align:left">窗口截图</td><td style="text-align:center">cmd-shift-4-space</td></tr><tr><td style="text-align:left">打开特殊符号</td><td style="text-align:center">cmd-ctrl-space</td></tr></tbody></table><h2 id="固定Finder窗口大小"><a href="#固定Finder窗口大小" class="headerlink" title="固定Finder窗口大小"></a>固定Finder窗口大小</h2><p>按住<code>opt</code>拖动<code>Finder</code>窗口即可固定大小</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Mac --&gt;
&lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Descriptions&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;ShortCut&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Finder下显示/隐藏文件&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-shift-.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;强制退出程序&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-alt-esc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全屏截图&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-shift-3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;局部截图&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-shift-4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;窗口截图&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-shift-4-space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开特殊符号&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cmd-ctrl-space&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;固定Finder窗口大小&quot;&gt;&lt;a href=&quot;#固定Finder窗口大小&quot; class=&quot;headerlink&quot; title=&quot;固定Finder窗口大小&quot;&gt;&lt;/a&gt;固定Finder窗口大小&lt;/h2&gt;&lt;p&gt;按住&lt;code&gt;opt&lt;/code&gt;拖动&lt;code&gt;Finder&lt;/code&gt;窗口即可固定大小&lt;/p&gt;
    
    </summary>
    
    
      <category term="Gear" scheme="http://nic_reals.gitee.io/blog/tags/Gear/"/>
    
      <category term="Mac" scheme="http://nic_reals.gitee.io/blog/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Memory Management</title>
    <link href="http://nic_reals.gitee.io/blog/2016/05/19/iOS/Memory-Management/"/>
    <id>http://nic_reals.gitee.io/blog/2016/05/19/iOS/Memory-Management/</id>
    <published>2016-05-19T15:33:37.000Z</published>
    <updated>2017-10-26T13:04:44.375Z</updated>
    
    <content type="html"><![CDATA[<!-- # Memory Management --><blockquote><p><a href="https://hit-alibaba.github.io/interview/basic/arch/Memory-Management.html" target="_blank" rel="external">内存管理基本概念</a></p><p><a href="https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/MM.html" target="_blank" rel="external">iOS内存管理面试</a></p><p><a href="http://ios.jobbole.com/88708/" target="_blank" rel="external">深入理解循环引用，weakSelf，strongSelf</a></p></blockquote><h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><ul><li><p>栈：由系统自动分配，一般存放函数参数值，局部变量值等，由编译器自动创建和释放，操作方式类似数据结构中的栈，遵循先进后出原则；</p></li><li><p>堆：一般由程序员申请并指明大小，最终也由程序员释放。如果程序员不释放，程序结束时可能会由OS回收。对于堆区的管理是采用链表式管理的，操作系统有一个记录空闲内存地址的链表，当接收到程序分配内存的申请时，操作系统就会遍历该链表，遍历到一个记录的内存地址大于申请内存的链表节点，并将该节点从该链表中删除，然后将该节点记录的内存地址分配给程序；</p></li><li><p>全局区/静态区：顾名思义，全局变量和静态变量存储在这个区域。只不过初始化的全局变量和静态变量存储在一块，未初始化的全局变量和静态变量存储在一块。程序结束后由系统释放；</p></li><li><p>文字常量区：这个区域主要存储字符串常量。程序结束后由系统释放；</p></li><li><p>程序代码区：这个区域主要存放函数体的二进制代码。</p></li></ul><a id="more"></a><h2 id="ARC-amp-MRC"><a href="#ARC-amp-MRC" class="headerlink" title="ARC &amp; MRC"></a>ARC &amp; MRC</h2><h3 id="MRC"><a href="#MRC" class="headerlink" title="MRC"></a>MRC</h3><p>MRC对象操作及<code>retainCount</code>变化：</p><table><thead><tr><th style="text-align:left">对象操作</th><th style="text-align:left">OC中对应的方法</th><th style="text-align:left">retainCount 变化</th></tr></thead><tbody><tr><td style="text-align:left">生成并持有对象</td><td style="text-align:left">alloc/new/copy/mutableCopy等</td><td style="text-align:left"><center>    +1 </center></td></tr><tr><td style="text-align:left">持有对象</td><td style="text-align:left">retain</td><td style="text-align:left"><center>    +1 </center></td></tr><tr><td style="text-align:left">释放对象</td><td style="text-align:left">release</td><td style="text-align:left"><center>    -1 </center></td></tr><tr><td style="text-align:left">废弃对象</td><td style="text-align:left">dealloc</td><td style="text-align:left"><center>    - </center></td></tr></tbody></table><p>四个对象操作法则:</p><ul><li>自己生成的对象，自己持有。</li><li>非自己生成的对象，自己也能持有。</li><li>不在需要自己持有对象的时候，释放。</li><li>非自己持有的对象无需释放。</li></ul><p>MRC下<code>autorelease</code>使得对象在超出生命周期后能正确的被释放(通过调用release方法)。在调用 <code>release</code> 后，对象会被立即释放，而调用 <code>autorelease</code> 后，对象不会被立即释放，而是注册到 <code>autoreleasepool</code> 中，经过一段时间后 pool结束，此时调用<code>release</code>方法，对象被释放。</p><h3 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h3><p>ARC是一种自动内存管理机制，会根据引用计数自动监视对象的生存周期，通过在代码编译器自动插入内存管理代码以及一些<code>Runtime</code>优化实现自动引用计数。</p><h2 id="属性标识"><a href="#属性标识" class="headerlink" title="属性标识"></a>属性标识</h2><ul><li><code>assign</code>表示调用getter时只是一个简单的赋值，一般用于基本数据类型；</li><li><code>strong</code>表示属性定义了一个拥有关系，当调用setter赋值时，会将新值retain一次，旧值release，然后进行赋值；</li><li><code>weak</code>表示属性定义了一个非拥有关系，类似与<code>assign</code>的简单赋值，但是当属性所指向的对象被销毁时，该属性会被置为nil；</li><li><code>copy</code>与<code>strong</code>类似，不过在赋值时会进行<code>copy</code>操作而非<code>retain</code>,通常在需要保留某个不可变对象（NSString最常见），并且防止它被意外改变时使用;</li><li><code>unsafe_unretain</code>和<code>assign</code>类似表明非拥有关系，当所指向对象销毁时不会置为nil。</li></ul><h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><h3 id="一个循环引用的栗子"><a href="#一个循环引用的栗子" class="headerlink" title="一个循环引用的栗子"></a>一个循环引用的栗子</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^Study)();</div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span> , <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span> , <span class="keyword">nonatomic</span>) Study study;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;Student.h&quot;</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    Student *student = [[Student alloc]init];</div><div class="line">    student.name = @&quot;Hello World&quot;;</div><div class="line">    student.study = ^&#123;</div><div class="line">        NSLog(@&quot;my name is = %@&quot;,student.name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中<code>student</code>拥有<code>study</code>这个block，而<code>study</code>有拥有<code>student</code>,形成了循环引用。</p><h3 id="weakSelf避免循环引用"><a href="#weakSelf避免循环引用" class="headerlink" title="weakSelf避免循环引用"></a>weakSelf避免循环引用</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(student) weakSelf = student;</div><div class="line">student.study = ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"my name is = %@"</span>,weakSelf.name);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><code>__weak</code>定义了一种非拥有关系，当<code>weakSelf</code>指向的对象<code>student</code>销毁时，<code>weakSelf</code>会被置为nil，不会造成循环引用；</p><h3 id="strongSelf避免提前释放"><a href="#strongSelf避免提前释放" class="headerlink" title="strongSelf避免提前释放"></a>strongSelf避免提前释放</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"Student.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    Student *student = [[Student alloc]init];</div><div class="line">    student.name = <span class="string">@"Hello World"</span>;</div><div class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(student) weakSelf = student;</div><div class="line">    student.study = ^&#123;</div><div class="line">        __<span class="keyword">strong</span> <span class="keyword">typeof</span>(student) strongSelf = weakSelf;</div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"my name is = %@"</span>,strongSelf.name);</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line">    student.study();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此时由于<code>dispatch_after</code>2秒的异步延迟，<code>student.study()</code>会先于NSLog调用，<code>student.study()</code>执行完后，<code>student</code>会被销毁，由于<code>weakSelf</code>实用<code>__weak</code>定义了非拥有关系，<code>weakSelf</code>会被置为nil，所以输出为：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my name is = (null)</div></pre></td></tr></table></figure></p><p>使用<code>__strong</code>可以避免在block生命周期内，<code>strongSelf</code>被置为nil：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(student) weakSelf = student;</div><div class="line">   student.study = ^&#123;</div><div class="line">       __<span class="keyword">strong</span> <span class="keyword">typeof</span>(student) strongSelf = weakSelf;</div><div class="line">       dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">           <span class="built_in">NSLog</span>(<span class="string">@"my name is = %@"</span>,strongSelf.name);</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">   &#125;;</div></pre></td></tr></table></figure></p><p>当<code>student.study()</code>执行，由于<code>__strong</code>定义了拥有关系，<code>strongSelf</code>指向<code>student</code>对象的内存地址，并且保留了对<code>student</code>的引用，此时<code>strongSelf</code>不会被销毁，当block调用完，<code>strongSelf</code>作为临时变量被销毁，没有指针指向<code>student</code>对象，<code>student</code>也被销毁，所以也不会造成循环引用。</p><h2 id="浅拷贝-amp-深拷贝"><a href="#浅拷贝-amp-深拷贝" class="headerlink" title="浅拷贝&amp;深拷贝"></a>浅拷贝&amp;深拷贝</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>浅拷贝：只是复制容器本身，不会复制容器内部的元素，浅拷贝后生成的新容器对象和原始容器对象共享内部元素；</p></li><li><p>深拷贝：不仅复制容器本身，容器内部的元素也会复制，深拷贝后生成的新容器对象和原始容器的内部元素是独立的；</p></li></ul><h3 id="copy-amp-amp-mutableCopy"><a href="#copy-amp-amp-mutableCopy" class="headerlink" title="copy &amp;&amp; mutableCopy"></a>copy &amp;&amp; mutableCopy</h3><ul><li><p>使用mutableCopy拷贝出的对象都会与被拷贝对象指向不同对象；使用copy拷贝出的对象若被拷贝对象是不可变对象，则指向同一对象，若被拷贝对象为不可变对象，则指向不同对象。</p></li><li><p>对于集合类对象，使用mutableCopy，copy操作都是浅拷贝，即使拷贝出的对象内存地址不同，但集合内部元素内存地址相同。</p></li><li><p>使用<code>initWithArray: copyItems:</code>拷贝出的对象只能实现单层深复制，完全深复制可以使用归档和解档：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copyArray = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:[<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:array]];</div></pre></td></tr></table></figure></li><li><p>可变对象属性用copy修饰，当该对象调用setter方法赋值时，实际会先调用copy生成不可变对象，然后再赋值给该属性，该变量实际会变成不可变对象，调用可变对象方法会crash。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- # Memory Management --&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hit-alibaba.github.io/interview/basic/arch/Memory-Management.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内存管理基本概念&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hit-alibaba.github.io/interview/iOS/ObjC-Basic/MM.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS内存管理面试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ios.jobbole.com/88708/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解循环引用，weakSelf，strongSelf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;堆栈&quot;&gt;&lt;a href=&quot;#堆栈&quot; class=&quot;headerlink&quot; title=&quot;堆栈&quot;&gt;&lt;/a&gt;堆栈&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;栈：由系统自动分配，一般存放函数参数值，局部变量值等，由编译器自动创建和释放，操作方式类似数据结构中的栈，遵循先进后出原则；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;堆：一般由程序员申请并指明大小，最终也由程序员释放。如果程序员不释放，程序结束时可能会由OS回收。对于堆区的管理是采用链表式管理的，操作系统有一个记录空闲内存地址的链表，当接收到程序分配内存的申请时，操作系统就会遍历该链表，遍历到一个记录的内存地址大于申请内存的链表节点，并将该节点从该链表中删除，然后将该节点记录的内存地址分配给程序；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局区/静态区：顾名思义，全局变量和静态变量存储在这个区域。只不过初始化的全局变量和静态变量存储在一块，未初始化的全局变量和静态变量存储在一块。程序结束后由系统释放；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文字常量区：这个区域主要存储字符串常量。程序结束后由系统释放；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;程序代码区：这个区域主要存放函数体的二进制代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://nic_reals.gitee.io/blog/tags/iOS/"/>
    
      <category term="Memory-Management" scheme="http://nic_reals.gitee.io/blog/tags/Memory-Management/"/>
    
  </entry>
  
</feed>
